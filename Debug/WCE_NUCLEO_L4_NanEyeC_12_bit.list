
WCE_NUCLEO_L4_NanEyeC_12_bit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005320  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080054dc  080054dc  000154dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800554c  0800554c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800554c  0800554c  0001554c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005554  08005554  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005554  08005554  00015554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005558  08005558  00015558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800555c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  2000000c  08005568  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08005568  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000daae  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001bfc  00000000  00000000  0002daea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c40  00000000  00000000  0002f6e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b58  00000000  00000000  00030328  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029044  00000000  00000000  00030e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000996c  00000000  00000000  00059ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fd1c5  00000000  00000000  00063830  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001609f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003224  00000000  00000000  00160a70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080054c4 	.word	0x080054c4

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	080054c4 	.word	0x080054c4

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b972 	b.w	80004f8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	4688      	mov	r8, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14b      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023a:	428a      	cmp	r2, r1
 800023c:	4615      	mov	r5, r2
 800023e:	d967      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0720 	rsb	r7, r2, #32
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	fa20 f707 	lsr.w	r7, r0, r7
 8000252:	4095      	lsls	r5, r2
 8000254:	ea47 0803 	orr.w	r8, r7, r3
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbb8 f7fe 	udiv	r7, r8, lr
 8000264:	fa1f fc85 	uxth.w	ip, r5
 8000268:	fb0e 8817 	mls	r8, lr, r7, r8
 800026c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000270:	fb07 f10c 	mul.w	r1, r7, ip
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18eb      	adds	r3, r5, r3
 800027a:	f107 30ff 	add.w	r0, r7, #4294967295
 800027e:	f080 811b 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8118 	bls.w	80004b8 <__udivmoddi4+0x28c>
 8000288:	3f02      	subs	r7, #2
 800028a:	442b      	add	r3, r5
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0fe 	udiv	r0, r3, lr
 8000294:	fb0e 3310 	mls	r3, lr, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a0:	45a4      	cmp	ip, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	192c      	adds	r4, r5, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 8107 	bcs.w	80004bc <__udivmoddi4+0x290>
 80002ae:	45a4      	cmp	ip, r4
 80002b0:	f240 8104 	bls.w	80004bc <__udivmoddi4+0x290>
 80002b4:	3802      	subs	r0, #2
 80002b6:	442c      	add	r4, r5
 80002b8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002bc:	eba4 040c 	sub.w	r4, r4, ip
 80002c0:	2700      	movs	r7, #0
 80002c2:	b11e      	cbz	r6, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c6 4300 	strd	r4, r3, [r6]
 80002cc:	4639      	mov	r1, r7
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d909      	bls.n	80002ea <__udivmoddi4+0xbe>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80eb 	beq.w	80004b2 <__udivmoddi4+0x286>
 80002dc:	2700      	movs	r7, #0
 80002de:	e9c6 0100 	strd	r0, r1, [r6]
 80002e2:	4638      	mov	r0, r7
 80002e4:	4639      	mov	r1, r7
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	fab3 f783 	clz	r7, r3
 80002ee:	2f00      	cmp	r7, #0
 80002f0:	d147      	bne.n	8000382 <__udivmoddi4+0x156>
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xd0>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2c4>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb61 0303 	sbc.w	r3, r1, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4698      	mov	r8, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d0e0      	beq.n	80002cc <__udivmoddi4+0xa0>
 800030a:	e9c6 4800 	strd	r4, r8, [r6]
 800030e:	e7dd      	b.n	80002cc <__udivmoddi4+0xa0>
 8000310:	b902      	cbnz	r2, 8000314 <__udivmoddi4+0xe8>
 8000312:	deff      	udf	#255	; 0xff
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	2a00      	cmp	r2, #0
 800031a:	f040 808f 	bne.w	800043c <__udivmoddi4+0x210>
 800031e:	1b49      	subs	r1, r1, r5
 8000320:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000324:	fa1f f885 	uxth.w	r8, r5
 8000328:	2701      	movs	r7, #1
 800032a:	fbb1 fcfe 	udiv	ip, r1, lr
 800032e:	0c23      	lsrs	r3, r4, #16
 8000330:	fb0e 111c 	mls	r1, lr, ip, r1
 8000334:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000338:	fb08 f10c 	mul.w	r1, r8, ip
 800033c:	4299      	cmp	r1, r3
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x124>
 8000340:	18eb      	adds	r3, r5, r3
 8000342:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4299      	cmp	r1, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 800034e:	4684      	mov	ip, r0
 8000350:	1a59      	subs	r1, r3, r1
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb1 f0fe 	udiv	r0, r1, lr
 8000358:	fb0e 1410 	mls	r4, lr, r0, r1
 800035c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000360:	fb08 f800 	mul.w	r8, r8, r0
 8000364:	45a0      	cmp	r8, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x14c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x14a>
 8000370:	45a0      	cmp	r8, r4
 8000372:	f200 80b6 	bhi.w	80004e2 <__udivmoddi4+0x2b6>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 0408 	sub.w	r4, r4, r8
 800037c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000380:	e79f      	b.n	80002c2 <__udivmoddi4+0x96>
 8000382:	f1c7 0c20 	rsb	ip, r7, #32
 8000386:	40bb      	lsls	r3, r7
 8000388:	fa22 fe0c 	lsr.w	lr, r2, ip
 800038c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000390:	fa01 f407 	lsl.w	r4, r1, r7
 8000394:	fa20 f50c 	lsr.w	r5, r0, ip
 8000398:	fa21 f30c 	lsr.w	r3, r1, ip
 800039c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a0:	4325      	orrs	r5, r4
 80003a2:	fbb3 f9f8 	udiv	r9, r3, r8
 80003a6:	0c2c      	lsrs	r4, r5, #16
 80003a8:	fb08 3319 	mls	r3, r8, r9, r3
 80003ac:	fa1f fa8e 	uxth.w	sl, lr
 80003b0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003b4:	fb09 f40a 	mul.w	r4, r9, sl
 80003b8:	429c      	cmp	r4, r3
 80003ba:	fa02 f207 	lsl.w	r2, r2, r7
 80003be:	fa00 f107 	lsl.w	r1, r0, r7
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1e 0303 	adds.w	r3, lr, r3
 80003c8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003cc:	f080 8087 	bcs.w	80004de <__udivmoddi4+0x2b2>
 80003d0:	429c      	cmp	r4, r3
 80003d2:	f240 8084 	bls.w	80004de <__udivmoddi4+0x2b2>
 80003d6:	f1a9 0902 	sub.w	r9, r9, #2
 80003da:	4473      	add	r3, lr
 80003dc:	1b1b      	subs	r3, r3, r4
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e4:	fb08 3310 	mls	r3, r8, r0, r3
 80003e8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003ec:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f0:	45a2      	cmp	sl, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1e 0404 	adds.w	r4, lr, r4
 80003f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003fc:	d26b      	bcs.n	80004d6 <__udivmoddi4+0x2aa>
 80003fe:	45a2      	cmp	sl, r4
 8000400:	d969      	bls.n	80004d6 <__udivmoddi4+0x2aa>
 8000402:	3802      	subs	r0, #2
 8000404:	4474      	add	r4, lr
 8000406:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040a:	fba0 8902 	umull	r8, r9, r0, r2
 800040e:	eba4 040a 	sub.w	r4, r4, sl
 8000412:	454c      	cmp	r4, r9
 8000414:	46c2      	mov	sl, r8
 8000416:	464b      	mov	r3, r9
 8000418:	d354      	bcc.n	80004c4 <__udivmoddi4+0x298>
 800041a:	d051      	beq.n	80004c0 <__udivmoddi4+0x294>
 800041c:	2e00      	cmp	r6, #0
 800041e:	d069      	beq.n	80004f4 <__udivmoddi4+0x2c8>
 8000420:	ebb1 050a 	subs.w	r5, r1, sl
 8000424:	eb64 0403 	sbc.w	r4, r4, r3
 8000428:	fa04 fc0c 	lsl.w	ip, r4, ip
 800042c:	40fd      	lsrs	r5, r7
 800042e:	40fc      	lsrs	r4, r7
 8000430:	ea4c 0505 	orr.w	r5, ip, r5
 8000434:	e9c6 5400 	strd	r5, r4, [r6]
 8000438:	2700      	movs	r7, #0
 800043a:	e747      	b.n	80002cc <__udivmoddi4+0xa0>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f703 	lsr.w	r7, r0, r3
 8000444:	4095      	lsls	r5, r2
 8000446:	fa01 f002 	lsl.w	r0, r1, r2
 800044a:	fa21 f303 	lsr.w	r3, r1, r3
 800044e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000452:	4338      	orrs	r0, r7
 8000454:	0c01      	lsrs	r1, r0, #16
 8000456:	fbb3 f7fe 	udiv	r7, r3, lr
 800045a:	fa1f f885 	uxth.w	r8, r5
 800045e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb07 f308 	mul.w	r3, r7, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	fa04 f402 	lsl.w	r4, r4, r2
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x256>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f107 3cff 	add.w	ip, r7, #4294967295
 8000478:	d22f      	bcs.n	80004da <__udivmoddi4+0x2ae>
 800047a:	428b      	cmp	r3, r1
 800047c:	d92d      	bls.n	80004da <__udivmoddi4+0x2ae>
 800047e:	3f02      	subs	r7, #2
 8000480:	4429      	add	r1, r5
 8000482:	1acb      	subs	r3, r1, r3
 8000484:	b281      	uxth	r1, r0
 8000486:	fbb3 f0fe 	udiv	r0, r3, lr
 800048a:	fb0e 3310 	mls	r3, lr, r0, r3
 800048e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000492:	fb00 f308 	mul.w	r3, r0, r8
 8000496:	428b      	cmp	r3, r1
 8000498:	d907      	bls.n	80004aa <__udivmoddi4+0x27e>
 800049a:	1869      	adds	r1, r5, r1
 800049c:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a0:	d217      	bcs.n	80004d2 <__udivmoddi4+0x2a6>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d915      	bls.n	80004d2 <__udivmoddi4+0x2a6>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4429      	add	r1, r5
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b0:	e73b      	b.n	800032a <__udivmoddi4+0xfe>
 80004b2:	4637      	mov	r7, r6
 80004b4:	4630      	mov	r0, r6
 80004b6:	e709      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b8:	4607      	mov	r7, r0
 80004ba:	e6e7      	b.n	800028c <__udivmoddi4+0x60>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6fb      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004c0:	4541      	cmp	r1, r8
 80004c2:	d2ab      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004c8:	eb69 020e 	sbc.w	r2, r9, lr
 80004cc:	3801      	subs	r0, #1
 80004ce:	4613      	mov	r3, r2
 80004d0:	e7a4      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d2:	4660      	mov	r0, ip
 80004d4:	e7e9      	b.n	80004aa <__udivmoddi4+0x27e>
 80004d6:	4618      	mov	r0, r3
 80004d8:	e795      	b.n	8000406 <__udivmoddi4+0x1da>
 80004da:	4667      	mov	r7, ip
 80004dc:	e7d1      	b.n	8000482 <__udivmoddi4+0x256>
 80004de:	4681      	mov	r9, r0
 80004e0:	e77c      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e2:	3802      	subs	r0, #2
 80004e4:	442c      	add	r4, r5
 80004e6:	e747      	b.n	8000378 <__udivmoddi4+0x14c>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	442b      	add	r3, r5
 80004ee:	e72f      	b.n	8000350 <__udivmoddi4+0x124>
 80004f0:	4638      	mov	r0, r7
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xda>
 80004f4:	4637      	mov	r7, r6
 80004f6:	e6e9      	b.n	80002cc <__udivmoddi4+0xa0>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	f5ad 3dcf 	sub.w	sp, sp, #105984	; 0x19e00
 8000502:	b0c6      	sub	sp, #280	; 0x118
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t received_data[52480] = {0};  //320*328 = 104960    104960/2=52480
 8000506:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 800050a:	3b04      	subs	r3, #4
 800050c:	4618      	mov	r0, r3
 800050e:	f44f 33cd 	mov.w	r3, #104960	; 0x19a00
 8000512:	461a      	mov	r2, r3
 8000514:	2100      	movs	r1, #0
 8000516:	f004 ffcd 	bl	80054b4 <memset>
	uint16_t empty_data[644] = {0};
 800051a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800051e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000522:	4618      	mov	r0, r3
 8000524:	f44f 63a1 	mov.w	r3, #1288	; 0x508
 8000528:	461a      	mov	r2, r3
 800052a:	2100      	movs	r1, #0
 800052c:	f004 ffc2 	bl	80054b4 <memset>
	uint16_t test_pattern[4];
	test_pattern[0] = 0b100100001100;
 8000530:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000534:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000538:	f640 120c 	movw	r2, #2316	; 0x90c
 800053c:	801a      	strh	r2, [r3, #0]
	test_pattern[1] = 0b000100101010;
 800053e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000542:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000546:	f44f 7295 	mov.w	r2, #298	; 0x12a
 800054a:	805a      	strh	r2, [r3, #2]
	test_pattern[2] = 0b100100100000;
 800054c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000550:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000554:	f44f 6212 	mov.w	r2, #2336	; 0x920
 8000558:	809a      	strh	r2, [r3, #4]
	test_pattern[3] = 0b010110101010; //12: 0b010100101000;  16:0b010110101010
 800055a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800055e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000562:	f240 52aa 	movw	r2, #1450	; 0x5aa
 8000566:	80da      	strh	r2, [r3, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000568:	f000 fd63 	bl	8001032 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056c:	f000 f8d0 	bl	8000710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000570:	f000 fa58 	bl	8000a24 <MX_GPIO_Init>
  MX_DMA_Init();
 8000574:	f000 fa24 	bl	80009c0 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000578:	f000 f94a 	bl	8000810 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 800057c:	f000 f996 	bl	80008ac <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000580:	f000 f9e0 	bl	8000944 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_Base_Start(&htim2);

  //---- ACTIVATION CLOCK PULSE -----
  HAL_SPI_DeInit(&hspi1);
 8000584:	4861      	ldr	r0, [pc, #388]	; (800070c <main+0x210>)
 8000586:	f003 fa1a 	bl	80039be <HAL_SPI_DeInit>
  Toggle_GPIO_pin_Init();
 800058a:	f000 fb17 	bl	8000bbc <Toggle_GPIO_pin_Init>
  GPIOA -> ODR ^= GPIO_PIN_5;
 800058e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000592:	695b      	ldr	r3, [r3, #20]
 8000594:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000598:	f083 0320 	eor.w	r3, r3, #32
 800059c:	6153      	str	r3, [r2, #20]
  HAL_Delay(1);
 800059e:	2001      	movs	r0, #1
 80005a0:	f000 fdbc 	bl	800111c <HAL_Delay>
  GPIOA -> ODR ^= GPIO_PIN_5;
 80005a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005ae:	f083 0320 	eor.w	r3, r3, #32
 80005b2:	6153      	str	r3, [r2, #20]

  //---- REGISTER CONFIGURATION - 48-bit (4PP) -----
  MX_SPI1_Init();
 80005b4:	f000 f9c6 	bl	8000944 <MX_SPI1_Init>
  HAL_SPI_Transmit(&hspi1, test_pattern, 4, 1000);
 80005b8:	f507 718c 	add.w	r1, r7, #280	; 0x118
 80005bc:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 80005c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005c4:	2204      	movs	r2, #4
 80005c6:	4851      	ldr	r0, [pc, #324]	; (800070c <main+0x210>)
 80005c8:	f003 fa21 	bl	8003a0e <HAL_SPI_Transmit>

  //---- WAIT FOR IDLE START-UP ----
  HAL_Delay(1);
 80005cc:	2001      	movs	r0, #1
 80005ce:	f000 fda5 	bl	800111c <HAL_Delay>

  //---- 10 CLOCKS -----
  HAL_SPI_DeInit(&hspi1);
 80005d2:	484e      	ldr	r0, [pc, #312]	; (800070c <main+0x210>)
 80005d4:	f003 f9f3 	bl	80039be <HAL_SPI_DeInit>
  Toggle_GPIO_pin_Init();
 80005d8:	f000 faf0 	bl	8000bbc <Toggle_GPIO_pin_Init>
  for (uint8_t i = 0; i < 20; i++)
 80005dc:	2300      	movs	r3, #0
 80005de:	f507 32cf 	add.w	r2, r7, #105984	; 0x19e00
 80005e2:	f202 1217 	addw	r2, r2, #279	; 0x117
 80005e6:	7013      	strb	r3, [r2, #0]
 80005e8:	e012      	b.n	8000610 <main+0x114>
    {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80005ea:	2120      	movs	r1, #32
 80005ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f0:	f001 fc42 	bl	8001e78 <HAL_GPIO_TogglePin>
	  HAL_Delay(1);
 80005f4:	2001      	movs	r0, #1
 80005f6:	f000 fd91 	bl	800111c <HAL_Delay>
  for (uint8_t i = 0; i < 20; i++)
 80005fa:	f507 33cf 	add.w	r3, r7, #105984	; 0x19e00
 80005fe:	f203 1317 	addw	r3, r3, #279	; 0x117
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	3301      	adds	r3, #1
 8000606:	f507 32cf 	add.w	r2, r7, #105984	; 0x19e00
 800060a:	f202 1217 	addw	r2, r2, #279	; 0x117
 800060e:	7013      	strb	r3, [r2, #0]
 8000610:	f507 33cf 	add.w	r3, r7, #105984	; 0x19e00
 8000614:	f203 1317 	addw	r3, r3, #279	; 0x117
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b13      	cmp	r3, #19
 800061c:	d9e5      	bls.n	80005ea <main+0xee>
//	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
//	  HAL_Delay(1);
//    }


  MX_DMA_Init();
 800061e:	f000 f9cf 	bl	80009c0 <MX_DMA_Init>
  MX_SPI1_Init();
 8000622:	f000 f98f 	bl	8000944 <MX_SPI1_Init>

  	//---- INITIAL PRE-SYNC MODE: RECEIVE 492 PP FROM CAMERA -----
    HAL_SPI_Receive(&hspi1, received_data, 329, 100);
 8000626:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 800062a:	3904      	subs	r1, #4
 800062c:	2364      	movs	r3, #100	; 0x64
 800062e:	f240 1249 	movw	r2, #329	; 0x149
 8000632:	4836      	ldr	r0, [pc, #216]	; (800070c <main+0x210>)
 8000634:	f003 fb59 	bl	8003cea <HAL_SPI_Receive>

    //---- SYNC MODE -----
    HAL_SPI_Receive(&hspi1, received_data, 656, 100);
 8000638:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 800063c:	3904      	subs	r1, #4
 800063e:	2364      	movs	r3, #100	; 0x64
 8000640:	f44f 7224 	mov.w	r2, #656	; 0x290
 8000644:	4831      	ldr	r0, [pc, #196]	; (800070c <main+0x210>)
 8000646:	f003 fb50 	bl	8003cea <HAL_SPI_Receive>

    //---- DELAY MODE -----
    HAL_SPI_Receive(&hspi1, received_data, 656, 100);
 800064a:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 800064e:	3904      	subs	r1, #4
 8000650:	2364      	movs	r3, #100	; 0x64
 8000652:	f44f 7224 	mov.w	r2, #656	; 0x290
 8000656:	482d      	ldr	r0, [pc, #180]	; (800070c <main+0x210>)
 8000658:	f003 fb47 	bl	8003cea <HAL_SPI_Receive>

	//---- READOUT MODE -----
	HAL_SPI_Receive(&hspi1, received_data, 52480, 1000); //1
 800065c:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 8000660:	3904      	subs	r1, #4
 8000662:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000666:	f44f 424d 	mov.w	r2, #52480	; 0xcd00
 800066a:	4828      	ldr	r0, [pc, #160]	; (800070c <main+0x210>)
 800066c:	f003 fb3d 	bl	8003cea <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, received_data, 52480, 1000); //2
 8000670:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 8000674:	3904      	subs	r1, #4
 8000676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800067a:	f44f 424d 	mov.w	r2, #52480	; 0xcd00
 800067e:	4823      	ldr	r0, [pc, #140]	; (800070c <main+0x210>)
 8000680:	f003 fb33 	bl	8003cea <HAL_SPI_Receive>

	//---- END OF FRAME -----
	HAL_SPI_Receive(&hspi1, received_data, 8, 100);
 8000684:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 8000688:	3904      	subs	r1, #4
 800068a:	2364      	movs	r3, #100	; 0x64
 800068c:	2208      	movs	r2, #8
 800068e:	481f      	ldr	r0, [pc, #124]	; (800070c <main+0x210>)
 8000690:	f003 fb2b 	bl	8003cea <HAL_SPI_Receive>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //---- REGISTER CONFIGURATION - 48-bit (4PP) -----
	  HAL_SPI_Transmit(&hspi1, test_pattern, 4, 1000);
 8000694:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8000698:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 800069c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a0:	2204      	movs	r2, #4
 80006a2:	481a      	ldr	r0, [pc, #104]	; (800070c <main+0x210>)
 80006a4:	f003 f9b3 	bl	8003a0e <HAL_SPI_Transmit>

	  //---- INTERFACE MODE -----
	  HAL_SPI_Transmit(&hspi1, empty_data, 644, 1000);
 80006a8:	f507 718c 	add.w	r1, r7, #280	; 0x118
 80006ac:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 80006b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b4:	f44f 7221 	mov.w	r2, #644	; 0x284
 80006b8:	4814      	ldr	r0, [pc, #80]	; (800070c <main+0x210>)
 80006ba:	f003 f9a8 	bl	8003a0e <HAL_SPI_Transmit>

	  //---- SYNC and DELAY MODE -----
	  HAL_SPI_Receive(&hspi1, received_data, 1312, 1000);
 80006be:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 80006c2:	3904      	subs	r1, #4
 80006c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c8:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 80006cc:	480f      	ldr	r0, [pc, #60]	; (800070c <main+0x210>)
 80006ce:	f003 fb0c 	bl	8003cea <HAL_SPI_Receive>

	  //---- READOUT MODE -----
	  HAL_SPI_Receive(&hspi1, received_data, 52480, 1000); //1
 80006d2:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 80006d6:	3904      	subs	r1, #4
 80006d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006dc:	f44f 424d 	mov.w	r2, #52480	; 0xcd00
 80006e0:	480a      	ldr	r0, [pc, #40]	; (800070c <main+0x210>)
 80006e2:	f003 fb02 	bl	8003cea <HAL_SPI_Receive>
	  HAL_SPI_Receive(&hspi1, received_data, 52480, 1000); //2
 80006e6:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 80006ea:	3904      	subs	r1, #4
 80006ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006f0:	f44f 424d 	mov.w	r2, #52480	; 0xcd00
 80006f4:	4805      	ldr	r0, [pc, #20]	; (800070c <main+0x210>)
 80006f6:	f003 faf8 	bl	8003cea <HAL_SPI_Receive>

	  //---- END OF FRAME -----
	  HAL_SPI_Receive(&hspi1, received_data, 8, 100);
 80006fa:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 80006fe:	3904      	subs	r1, #4
 8000700:	2364      	movs	r3, #100	; 0x64
 8000702:	2208      	movs	r2, #8
 8000704:	4801      	ldr	r0, [pc, #4]	; (800070c <main+0x210>)
 8000706:	f003 faf0 	bl	8003cea <HAL_SPI_Receive>
	  HAL_SPI_Transmit(&hspi1, test_pattern, 4, 1000);
 800070a:	e7c3      	b.n	8000694 <main+0x198>
 800070c:	20000140 	.word	0x20000140

08000710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b0bc      	sub	sp, #240	; 0xf0
 8000714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800071a:	2244      	movs	r2, #68	; 0x44
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f004 fec8 	bl	80054b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000724:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	2294      	movs	r2, #148	; 0x94
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f004 feba 	bl	80054b4 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000740:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000744:	f001 fbd2 	bl	8001eec <HAL_PWREx_ControlVoltageScaling>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0x42>
  {
    Error_Handler();
 800074e:	f000 fa57 	bl	8000c00 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000752:	2302      	movs	r3, #2
 8000754:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000758:	f44f 7380 	mov.w	r3, #256	; 0x100
 800075c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000760:	2340      	movs	r3, #64	; 0x40
 8000762:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000766:	2302      	movs	r3, #2
 8000768:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800076c:	2302      	movs	r3, #2
 800076e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000772:	2302      	movs	r3, #2
 8000774:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000778:	2310      	movs	r3, #16
 800077a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800077e:	2302      	movs	r3, #2
 8000780:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000784:	2302      	movs	r3, #2
 8000786:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800078a:	2302      	movs	r3, #2
 800078c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000790:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000794:	4618      	mov	r0, r3
 8000796:	f001 fc5d 	bl	8002054 <HAL_RCC_OscConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007a0:	f000 fa2e 	bl	8000c00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a4:	230f      	movs	r3, #15
 80007a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007aa:	2303      	movs	r3, #3
 80007ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007c4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80007c8:	2103      	movs	r1, #3
 80007ca:	4618      	mov	r0, r3
 80007cc:	f002 f868 	bl	80028a0 <HAL_RCC_ClockConfig>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007d6:	f000 fa13 	bl	8000c00 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPUART1;
 80007da:	2324      	movs	r3, #36	; 0x24
 80007dc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80007de:	2300      	movs	r3, #0
 80007e0:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	4618      	mov	r0, r3
 80007ea:	f002 fb3d 	bl	8002e68 <HAL_RCCEx_PeriphCLKConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80007f4:	f000 fa04 	bl	8000c00 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_2);
 80007f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007fc:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8000800:	2000      	movs	r0, #0
 8000802:	f002 f979 	bl	8002af8 <HAL_RCC_MCOConfig>
}
 8000806:	bf00      	nop
 8000808:	37f0      	adds	r7, #240	; 0xf0
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000814:	4b22      	ldr	r3, [pc, #136]	; (80008a0 <MX_LPUART1_UART_Init+0x90>)
 8000816:	4a23      	ldr	r2, [pc, #140]	; (80008a4 <MX_LPUART1_UART_Init+0x94>)
 8000818:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800081a:	4b21      	ldr	r3, [pc, #132]	; (80008a0 <MX_LPUART1_UART_Init+0x90>)
 800081c:	4a22      	ldr	r2, [pc, #136]	; (80008a8 <MX_LPUART1_UART_Init+0x98>)
 800081e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000820:	4b1f      	ldr	r3, [pc, #124]	; (80008a0 <MX_LPUART1_UART_Init+0x90>)
 8000822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000826:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000828:	4b1d      	ldr	r3, [pc, #116]	; (80008a0 <MX_LPUART1_UART_Init+0x90>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800082e:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <MX_LPUART1_UART_Init+0x90>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000834:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <MX_LPUART1_UART_Init+0x90>)
 8000836:	220c      	movs	r2, #12
 8000838:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083a:	4b19      	ldr	r3, [pc, #100]	; (80008a0 <MX_LPUART1_UART_Init+0x90>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000840:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <MX_LPUART1_UART_Init+0x90>)
 8000842:	2200      	movs	r2, #0
 8000844:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000846:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <MX_LPUART1_UART_Init+0x90>)
 8000848:	2200      	movs	r2, #0
 800084a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800084c:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <MX_LPUART1_UART_Init+0x90>)
 800084e:	2200      	movs	r2, #0
 8000850:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000852:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <MX_LPUART1_UART_Init+0x90>)
 8000854:	2200      	movs	r2, #0
 8000856:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000858:	4811      	ldr	r0, [pc, #68]	; (80008a0 <MX_LPUART1_UART_Init+0x90>)
 800085a:	f004 f85d 	bl	8004918 <HAL_UART_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000864:	f000 f9cc 	bl	8000c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000868:	2100      	movs	r1, #0
 800086a:	480d      	ldr	r0, [pc, #52]	; (80008a0 <MX_LPUART1_UART_Init+0x90>)
 800086c:	f004 fd19 	bl	80052a2 <HAL_UARTEx_SetTxFifoThreshold>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000876:	f000 f9c3 	bl	8000c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800087a:	2100      	movs	r1, #0
 800087c:	4808      	ldr	r0, [pc, #32]	; (80008a0 <MX_LPUART1_UART_Init+0x90>)
 800087e:	f004 fd4e 	bl	800531e <HAL_UARTEx_SetRxFifoThreshold>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000888:	f000 f9ba 	bl	8000c00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800088c:	4804      	ldr	r0, [pc, #16]	; (80008a0 <MX_LPUART1_UART_Init+0x90>)
 800088e:	f004 fccf 	bl	8005230 <HAL_UARTEx_DisableFifoMode>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000898:	f000 f9b2 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200000b4 	.word	0x200000b4
 80008a4:	40008000 	.word	0x40008000
 80008a8:	00033324 	.word	0x00033324

080008ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008b0:	4b22      	ldr	r3, [pc, #136]	; (800093c <MX_USART3_UART_Init+0x90>)
 80008b2:	4a23      	ldr	r2, [pc, #140]	; (8000940 <MX_USART3_UART_Init+0x94>)
 80008b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008b6:	4b21      	ldr	r3, [pc, #132]	; (800093c <MX_USART3_UART_Init+0x90>)
 80008b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008be:	4b1f      	ldr	r3, [pc, #124]	; (800093c <MX_USART3_UART_Init+0x90>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008c4:	4b1d      	ldr	r3, [pc, #116]	; (800093c <MX_USART3_UART_Init+0x90>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008ca:	4b1c      	ldr	r3, [pc, #112]	; (800093c <MX_USART3_UART_Init+0x90>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008d0:	4b1a      	ldr	r3, [pc, #104]	; (800093c <MX_USART3_UART_Init+0x90>)
 80008d2:	220c      	movs	r2, #12
 80008d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d6:	4b19      	ldr	r3, [pc, #100]	; (800093c <MX_USART3_UART_Init+0x90>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008dc:	4b17      	ldr	r3, [pc, #92]	; (800093c <MX_USART3_UART_Init+0x90>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008e2:	4b16      	ldr	r3, [pc, #88]	; (800093c <MX_USART3_UART_Init+0x90>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008e8:	4b14      	ldr	r3, [pc, #80]	; (800093c <MX_USART3_UART_Init+0x90>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ee:	4b13      	ldr	r3, [pc, #76]	; (800093c <MX_USART3_UART_Init+0x90>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008f4:	4811      	ldr	r0, [pc, #68]	; (800093c <MX_USART3_UART_Init+0x90>)
 80008f6:	f004 f80f 	bl	8004918 <HAL_UART_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000900:	f000 f97e 	bl	8000c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000904:	2100      	movs	r1, #0
 8000906:	480d      	ldr	r0, [pc, #52]	; (800093c <MX_USART3_UART_Init+0x90>)
 8000908:	f004 fccb 	bl	80052a2 <HAL_UARTEx_SetTxFifoThreshold>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000912:	f000 f975 	bl	8000c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000916:	2100      	movs	r1, #0
 8000918:	4808      	ldr	r0, [pc, #32]	; (800093c <MX_USART3_UART_Init+0x90>)
 800091a:	f004 fd00 	bl	800531e <HAL_UARTEx_SetRxFifoThreshold>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000924:	f000 f96c 	bl	8000c00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000928:	4804      	ldr	r0, [pc, #16]	; (800093c <MX_USART3_UART_Init+0x90>)
 800092a:	f004 fc81 	bl	8005230 <HAL_UARTEx_DisableFifoMode>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000934:	f000 f964 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000028 	.word	0x20000028
 8000940:	40004800 	.word	0x40004800

08000944 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000948:	4b1b      	ldr	r3, [pc, #108]	; (80009b8 <MX_SPI1_Init+0x74>)
 800094a:	4a1c      	ldr	r2, [pc, #112]	; (80009bc <MX_SPI1_Init+0x78>)
 800094c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800094e:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <MX_SPI1_Init+0x74>)
 8000950:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000954:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000956:	4b18      	ldr	r3, [pc, #96]	; (80009b8 <MX_SPI1_Init+0x74>)
 8000958:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800095c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_12BIT;
 800095e:	4b16      	ldr	r3, [pc, #88]	; (80009b8 <MX_SPI1_Init+0x74>)
 8000960:	f44f 6230 	mov.w	r2, #2816	; 0xb00
 8000964:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000966:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <MX_SPI1_Init+0x74>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800096c:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <MX_SPI1_Init+0x74>)
 800096e:	2200      	movs	r2, #0
 8000970:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <MX_SPI1_Init+0x74>)
 8000974:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000978:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800097a:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <MX_SPI1_Init+0x74>)
 800097c:	2208      	movs	r2, #8
 800097e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000980:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <MX_SPI1_Init+0x74>)
 8000982:	2200      	movs	r2, #0
 8000984:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000986:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <MX_SPI1_Init+0x74>)
 8000988:	2200      	movs	r2, #0
 800098a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800098c:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <MX_SPI1_Init+0x74>)
 800098e:	2200      	movs	r2, #0
 8000990:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <MX_SPI1_Init+0x74>)
 8000994:	2207      	movs	r2, #7
 8000996:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000998:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <MX_SPI1_Init+0x74>)
 800099a:	2200      	movs	r2, #0
 800099c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <MX_SPI1_Init+0x74>)
 80009a0:	2208      	movs	r2, #8
 80009a2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009a4:	4804      	ldr	r0, [pc, #16]	; (80009b8 <MX_SPI1_Init+0x74>)
 80009a6:	f002 ff67 	bl	8003878 <HAL_SPI_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 80009b0:	f000 f926 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20000140 	.word	0x20000140
 80009bc:	40013000 	.word	0x40013000

080009c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80009c6:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <MX_DMA_Init+0x60>)
 80009c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009ca:	4a15      	ldr	r2, [pc, #84]	; (8000a20 <MX_DMA_Init+0x60>)
 80009cc:	f043 0304 	orr.w	r3, r3, #4
 80009d0:	6493      	str	r3, [r2, #72]	; 0x48
 80009d2:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <MX_DMA_Init+0x60>)
 80009d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009d6:	f003 0304 	and.w	r3, r3, #4
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <MX_DMA_Init+0x60>)
 80009e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009e2:	4a0f      	ldr	r2, [pc, #60]	; (8000a20 <MX_DMA_Init+0x60>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	6493      	str	r3, [r2, #72]	; 0x48
 80009ea:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <MX_DMA_Init+0x60>)
 80009ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	603b      	str	r3, [r7, #0]
 80009f4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2100      	movs	r1, #0
 80009fa:	200b      	movs	r0, #11
 80009fc:	f000 fcad 	bl	800135a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a00:	200b      	movs	r0, #11
 8000a02:	f000 fcc6 	bl	8001392 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2100      	movs	r1, #0
 8000a0a:	200c      	movs	r0, #12
 8000a0c:	f000 fca5 	bl	800135a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000a10:	200c      	movs	r0, #12
 8000a12:	f000 fcbe 	bl	8001392 <HAL_NVIC_EnableIRQ>

}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40021000 	.word	0x40021000

08000a24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08c      	sub	sp, #48	; 0x30
 8000a28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
 8000a38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3a:	4b5b      	ldr	r3, [pc, #364]	; (8000ba8 <MX_GPIO_Init+0x184>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	4a5a      	ldr	r2, [pc, #360]	; (8000ba8 <MX_GPIO_Init+0x184>)
 8000a40:	f043 0304 	orr.w	r3, r3, #4
 8000a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a46:	4b58      	ldr	r3, [pc, #352]	; (8000ba8 <MX_GPIO_Init+0x184>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	f003 0304 	and.w	r3, r3, #4
 8000a4e:	61bb      	str	r3, [r7, #24]
 8000a50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a52:	4b55      	ldr	r3, [pc, #340]	; (8000ba8 <MX_GPIO_Init+0x184>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	4a54      	ldr	r2, [pc, #336]	; (8000ba8 <MX_GPIO_Init+0x184>)
 8000a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a5e:	4b52      	ldr	r3, [pc, #328]	; (8000ba8 <MX_GPIO_Init+0x184>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a66:	617b      	str	r3, [r7, #20]
 8000a68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	4b4f      	ldr	r3, [pc, #316]	; (8000ba8 <MX_GPIO_Init+0x184>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	4a4e      	ldr	r2, [pc, #312]	; (8000ba8 <MX_GPIO_Init+0x184>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a76:	4b4c      	ldr	r3, [pc, #304]	; (8000ba8 <MX_GPIO_Init+0x184>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a82:	4b49      	ldr	r3, [pc, #292]	; (8000ba8 <MX_GPIO_Init+0x184>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	4a48      	ldr	r2, [pc, #288]	; (8000ba8 <MX_GPIO_Init+0x184>)
 8000a88:	f043 0302 	orr.w	r3, r3, #2
 8000a8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a8e:	4b46      	ldr	r3, [pc, #280]	; (8000ba8 <MX_GPIO_Init+0x184>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	f003 0302 	and.w	r3, r3, #2
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a9a:	4b43      	ldr	r3, [pc, #268]	; (8000ba8 <MX_GPIO_Init+0x184>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	4a42      	ldr	r2, [pc, #264]	; (8000ba8 <MX_GPIO_Init+0x184>)
 8000aa0:	f043 0308 	orr.w	r3, r3, #8
 8000aa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa6:	4b40      	ldr	r3, [pc, #256]	; (8000ba8 <MX_GPIO_Init+0x184>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	f003 0308 	and.w	r3, r3, #8
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ab2:	4b3d      	ldr	r3, [pc, #244]	; (8000ba8 <MX_GPIO_Init+0x184>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	4a3c      	ldr	r2, [pc, #240]	; (8000ba8 <MX_GPIO_Init+0x184>)
 8000ab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000abe:	4b3a      	ldr	r3, [pc, #232]	; (8000ba8 <MX_GPIO_Init+0x184>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000aca:	f001 fab3 	bl	8002034 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2140      	movs	r1, #64	; 0x40
 8000ad2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad6:	f001 f9b7 	bl	8001e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000ae0:	4832      	ldr	r0, [pc, #200]	; (8000bac <MX_GPIO_Init+0x188>)
 8000ae2:	f001 f9b1 	bl	8001e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2120      	movs	r1, #32
 8000aea:	4831      	ldr	r0, [pc, #196]	; (8000bb0 <MX_GPIO_Init+0x18c>)
 8000aec:	f001 f9ac 	bl	8001e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000af0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000af6:	4b2f      	ldr	r3, [pc, #188]	; (8000bb4 <MX_GPIO_Init+0x190>)
 8000af8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	4619      	mov	r1, r3
 8000b04:	482c      	ldr	r0, [pc, #176]	; (8000bb8 <MX_GPIO_Init+0x194>)
 8000b06:	f000 ff1b 	bl	8001940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b0a:	2340      	movs	r3, #64	; 0x40
 8000b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2300      	movs	r3, #0
 8000b18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	4619      	mov	r1, r3
 8000b20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b24:	f000 ff0c 	bl	8001940 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000b28:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	4619      	mov	r1, r3
 8000b40:	481a      	ldr	r0, [pc, #104]	; (8000bac <MX_GPIO_Init+0x188>)
 8000b42:	f000 fefd 	bl	8001940 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b46:	2320      	movs	r3, #32
 8000b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	2300      	movs	r3, #0
 8000b54:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b56:	f107 031c 	add.w	r3, r7, #28
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4814      	ldr	r0, [pc, #80]	; (8000bb0 <MX_GPIO_Init+0x18c>)
 8000b5e:	f000 feef 	bl	8001940 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b62:	2340      	movs	r3, #64	; 0x40
 8000b64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b66:	2300      	movs	r3, #0
 8000b68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b6e:	f107 031c 	add.w	r3, r7, #28
 8000b72:	4619      	mov	r1, r3
 8000b74:	480e      	ldr	r0, [pc, #56]	; (8000bb0 <MX_GPIO_Init+0x18c>)
 8000b76:	f000 fee3 	bl	8001940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	2302      	movs	r3, #2
 8000b82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b90:	f107 031c 	add.w	r3, r7, #28
 8000b94:	4619      	mov	r1, r3
 8000b96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b9a:	f000 fed1 	bl	8001940 <HAL_GPIO_Init>

}
 8000b9e:	bf00      	nop
 8000ba0:	3730      	adds	r7, #48	; 0x30
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	48000400 	.word	0x48000400
 8000bb0:	48001800 	.word	0x48001800
 8000bb4:	10110000 	.word	0x10110000
 8000bb8:	48000800 	.word	0x48000800

08000bbc <Toggle_GPIO_pin_Init>:

/* USER CODE BEGIN 4 */
static void Toggle_GPIO_pin_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2120      	movs	r1, #32
 8000bd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd8:	f001 f936 	bl	8001e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000bdc:	2320      	movs	r3, #32
 8000bde:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2300      	movs	r3, #0
 8000bea:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	4619      	mov	r1, r3
 8000bf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf4:	f000 fea4 	bl	8001940 <HAL_GPIO_Init>
}
 8000bf8:	bf00      	nop
 8000bfa:	3718      	adds	r7, #24
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c04:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c06:	e7fe      	b.n	8000c06 <Error_Handler+0x6>

08000c08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0e:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <HAL_MspInit+0x44>)
 8000c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c12:	4a0e      	ldr	r2, [pc, #56]	; (8000c4c <HAL_MspInit+0x44>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	6613      	str	r3, [r2, #96]	; 0x60
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <HAL_MspInit+0x44>)
 8000c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c26:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <HAL_MspInit+0x44>)
 8000c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c2a:	4a08      	ldr	r2, [pc, #32]	; (8000c4c <HAL_MspInit+0x44>)
 8000c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c30:	6593      	str	r3, [r2, #88]	; 0x58
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <HAL_MspInit+0x44>)
 8000c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	40021000 	.word	0x40021000

08000c50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08c      	sub	sp, #48	; 0x30
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a30      	ldr	r2, [pc, #192]	; (8000d30 <HAL_UART_MspInit+0xe0>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d12b      	bne.n	8000cca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000c72:	4b30      	ldr	r3, [pc, #192]	; (8000d34 <HAL_UART_MspInit+0xe4>)
 8000c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c76:	4a2f      	ldr	r2, [pc, #188]	; (8000d34 <HAL_UART_MspInit+0xe4>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000c7e:	4b2d      	ldr	r3, [pc, #180]	; (8000d34 <HAL_UART_MspInit+0xe4>)
 8000c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	61bb      	str	r3, [r7, #24]
 8000c88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c8a:	4b2a      	ldr	r3, [pc, #168]	; (8000d34 <HAL_UART_MspInit+0xe4>)
 8000c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8e:	4a29      	ldr	r2, [pc, #164]	; (8000d34 <HAL_UART_MspInit+0xe4>)
 8000c90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c96:	4b27      	ldr	r3, [pc, #156]	; (8000d34 <HAL_UART_MspInit+0xe4>)
 8000c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 8000ca2:	f001 f9c7 	bl	8002034 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000ca6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000cb8:	2308      	movs	r3, #8
 8000cba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cbc:	f107 031c 	add.w	r3, r7, #28
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	481d      	ldr	r0, [pc, #116]	; (8000d38 <HAL_UART_MspInit+0xe8>)
 8000cc4:	f000 fe3c 	bl	8001940 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cc8:	e02d      	b.n	8000d26 <HAL_UART_MspInit+0xd6>
  else if(huart->Instance==USART3)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a1b      	ldr	r2, [pc, #108]	; (8000d3c <HAL_UART_MspInit+0xec>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d128      	bne.n	8000d26 <HAL_UART_MspInit+0xd6>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cd4:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <HAL_UART_MspInit+0xe4>)
 8000cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd8:	4a16      	ldr	r2, [pc, #88]	; (8000d34 <HAL_UART_MspInit+0xe4>)
 8000cda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cde:	6593      	str	r3, [r2, #88]	; 0x58
 8000ce0:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <HAL_UART_MspInit+0xe4>)
 8000ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cec:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <HAL_UART_MspInit+0xe4>)
 8000cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf0:	4a10      	ldr	r2, [pc, #64]	; (8000d34 <HAL_UART_MspInit+0xe4>)
 8000cf2:	f043 0308 	orr.w	r3, r3, #8
 8000cf6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cf8:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <HAL_UART_MspInit+0xe4>)
 8000cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfc:	f003 0308 	and.w	r3, r3, #8
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d04:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d12:	2303      	movs	r3, #3
 8000d14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d16:	2307      	movs	r3, #7
 8000d18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d1a:	f107 031c 	add.w	r3, r7, #28
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4807      	ldr	r0, [pc, #28]	; (8000d40 <HAL_UART_MspInit+0xf0>)
 8000d22:	f000 fe0d 	bl	8001940 <HAL_GPIO_Init>
}
 8000d26:	bf00      	nop
 8000d28:	3730      	adds	r7, #48	; 0x30
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40008000 	.word	0x40008000
 8000d34:	40021000 	.word	0x40021000
 8000d38:	48001800 	.word	0x48001800
 8000d3c:	40004800 	.word	0x40004800
 8000d40:	48000c00 	.word	0x48000c00

08000d44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	; 0x28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a45      	ldr	r2, [pc, #276]	; (8000e78 <HAL_SPI_MspInit+0x134>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	f040 8083 	bne.w	8000e6e <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d68:	4b44      	ldr	r3, [pc, #272]	; (8000e7c <HAL_SPI_MspInit+0x138>)
 8000d6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d6c:	4a43      	ldr	r2, [pc, #268]	; (8000e7c <HAL_SPI_MspInit+0x138>)
 8000d6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d72:	6613      	str	r3, [r2, #96]	; 0x60
 8000d74:	4b41      	ldr	r3, [pc, #260]	; (8000e7c <HAL_SPI_MspInit+0x138>)
 8000d76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d80:	4b3e      	ldr	r3, [pc, #248]	; (8000e7c <HAL_SPI_MspInit+0x138>)
 8000d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d84:	4a3d      	ldr	r2, [pc, #244]	; (8000e7c <HAL_SPI_MspInit+0x138>)
 8000d86:	f043 0301 	orr.w	r3, r3, #1
 8000d8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d8c:	4b3b      	ldr	r3, [pc, #236]	; (8000e7c <HAL_SPI_MspInit+0x138>)
 8000d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d90:	f003 0301 	and.w	r3, r3, #1
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000d98:	23a0      	movs	r3, #160	; 0xa0
 8000d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da4:	2303      	movs	r3, #3
 8000da6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000da8:	2305      	movs	r3, #5
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	4619      	mov	r1, r3
 8000db2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db6:	f000 fdc3 	bl	8001940 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel1;
 8000dba:	4b31      	ldr	r3, [pc, #196]	; (8000e80 <HAL_SPI_MspInit+0x13c>)
 8000dbc:	4a31      	ldr	r2, [pc, #196]	; (8000e84 <HAL_SPI_MspInit+0x140>)
 8000dbe:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8000dc0:	4b2f      	ldr	r3, [pc, #188]	; (8000e80 <HAL_SPI_MspInit+0x13c>)
 8000dc2:	220a      	movs	r2, #10
 8000dc4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dc6:	4b2e      	ldr	r3, [pc, #184]	; (8000e80 <HAL_SPI_MspInit+0x13c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dcc:	4b2c      	ldr	r3, [pc, #176]	; (8000e80 <HAL_SPI_MspInit+0x13c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dd2:	4b2b      	ldr	r3, [pc, #172]	; (8000e80 <HAL_SPI_MspInit+0x13c>)
 8000dd4:	2280      	movs	r2, #128	; 0x80
 8000dd6:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dd8:	4b29      	ldr	r3, [pc, #164]	; (8000e80 <HAL_SPI_MspInit+0x13c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dde:	4b28      	ldr	r3, [pc, #160]	; (8000e80 <HAL_SPI_MspInit+0x13c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000de4:	4b26      	ldr	r3, [pc, #152]	; (8000e80 <HAL_SPI_MspInit+0x13c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000dea:	4b25      	ldr	r3, [pc, #148]	; (8000e80 <HAL_SPI_MspInit+0x13c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000df0:	4823      	ldr	r0, [pc, #140]	; (8000e80 <HAL_SPI_MspInit+0x13c>)
 8000df2:	f000 faf7 	bl	80013e4 <HAL_DMA_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8000dfc:	f7ff ff00 	bl	8000c00 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a1f      	ldr	r2, [pc, #124]	; (8000e80 <HAL_SPI_MspInit+0x13c>)
 8000e04:	659a      	str	r2, [r3, #88]	; 0x58
 8000e06:	4a1e      	ldr	r2, [pc, #120]	; (8000e80 <HAL_SPI_MspInit+0x13c>)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel2;
 8000e0c:	4b1e      	ldr	r3, [pc, #120]	; (8000e88 <HAL_SPI_MspInit+0x144>)
 8000e0e:	4a1f      	ldr	r2, [pc, #124]	; (8000e8c <HAL_SPI_MspInit+0x148>)
 8000e10:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8000e12:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <HAL_SPI_MspInit+0x144>)
 8000e14:	220b      	movs	r2, #11
 8000e16:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e18:	4b1b      	ldr	r3, [pc, #108]	; (8000e88 <HAL_SPI_MspInit+0x144>)
 8000e1a:	2210      	movs	r2, #16
 8000e1c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e1e:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <HAL_SPI_MspInit+0x144>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e24:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <HAL_SPI_MspInit+0x144>)
 8000e26:	2280      	movs	r2, #128	; 0x80
 8000e28:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e2a:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <HAL_SPI_MspInit+0x144>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e30:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <HAL_SPI_MspInit+0x144>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000e36:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <HAL_SPI_MspInit+0x144>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <HAL_SPI_MspInit+0x144>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000e42:	4811      	ldr	r0, [pc, #68]	; (8000e88 <HAL_SPI_MspInit+0x144>)
 8000e44:	f000 face 	bl	80013e4 <HAL_DMA_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 8000e4e:	f7ff fed7 	bl	8000c00 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a0c      	ldr	r2, [pc, #48]	; (8000e88 <HAL_SPI_MspInit+0x144>)
 8000e56:	655a      	str	r2, [r3, #84]	; 0x54
 8000e58:	4a0b      	ldr	r2, [pc, #44]	; (8000e88 <HAL_SPI_MspInit+0x144>)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2100      	movs	r1, #0
 8000e62:	2023      	movs	r0, #35	; 0x23
 8000e64:	f000 fa79 	bl	800135a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000e68:	2023      	movs	r0, #35	; 0x23
 8000e6a:	f000 fa92 	bl	8001392 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e6e:	bf00      	nop
 8000e70:	3728      	adds	r7, #40	; 0x28
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40013000 	.word	0x40013000
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	200001a4 	.word	0x200001a4
 8000e84:	40020008 	.word	0x40020008
 8000e88:	20000204 	.word	0x20000204
 8000e8c:	4002001c 	.word	0x4002001c

08000e90 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0f      	ldr	r2, [pc, #60]	; (8000edc <HAL_SPI_MspDeInit+0x4c>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d117      	bne.n	8000ed2 <HAL_SPI_MspDeInit+0x42>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8000ea2:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <HAL_SPI_MspDeInit+0x50>)
 8000ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ea6:	4a0e      	ldr	r2, [pc, #56]	; (8000ee0 <HAL_SPI_MspDeInit+0x50>)
 8000ea8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000eac:	6613      	str	r3, [r2, #96]	; 0x60

    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_7);
 8000eae:	21a0      	movs	r1, #160	; 0xa0
 8000eb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb4:	f000 fed6 	bl	8001c64 <HAL_GPIO_DeInit>

    /* SPI1 DMA DeInit */
    HAL_DMA_DeInit(hspi->hdmarx);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f000 fb39 	bl	8001534 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 fb34 	bl	8001534 <HAL_DMA_DeInit>

    /* SPI1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 8000ecc:	2023      	movs	r0, #35	; 0x23
 8000ece:	f000 fa6e 	bl	80013ae <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40013000 	.word	0x40013000
 8000ee0:	40021000 	.word	0x40021000

08000ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <NMI_Handler+0x4>

08000eea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eee:	e7fe      	b.n	8000eee <HardFault_Handler+0x4>

08000ef0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <MemManage_Handler+0x4>

08000ef6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efa:	e7fe      	b.n	8000efa <BusFault_Handler+0x4>

08000efc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <UsageFault_Handler+0x4>

08000f02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f30:	f000 f8d4 	bl	80010dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000f3c:	4802      	ldr	r0, [pc, #8]	; (8000f48 <DMA1_Channel1_IRQHandler+0x10>)
 8000f3e:	f000 fbee 	bl	800171e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	200001a4 	.word	0x200001a4

08000f4c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000f50:	4802      	ldr	r0, [pc, #8]	; (8000f5c <DMA1_Channel2_IRQHandler+0x10>)
 8000f52:	f000 fbe4 	bl	800171e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000204 	.word	0x20000204

08000f60 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000f64:	4802      	ldr	r0, [pc, #8]	; (8000f70 <SPI1_IRQHandler+0x10>)
 8000f66:	f003 fa03 	bl	8004370 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000140 	.word	0x20000140

08000f74 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f78:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <SystemInit+0x64>)
 8000f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f7e:	4a16      	ldr	r2, [pc, #88]	; (8000fd8 <SystemInit+0x64>)
 8000f80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <SystemInit+0x68>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a13      	ldr	r2, [pc, #76]	; (8000fdc <SystemInit+0x68>)
 8000f8e:	f043 0301 	orr.w	r3, r3, #1
 8000f92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000f94:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <SystemInit+0x68>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000f9a:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <SystemInit+0x68>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a0f      	ldr	r2, [pc, #60]	; (8000fdc <SystemInit+0x68>)
 8000fa0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000fa4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000fa8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000faa:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <SystemInit+0x68>)
 8000fac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fb0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <SystemInit+0x68>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a09      	ldr	r2, [pc, #36]	; (8000fdc <SystemInit+0x68>)
 8000fb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fbc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000fbe:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <SystemInit+0x68>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fc4:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <SystemInit+0x64>)
 8000fc6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fca:	609a      	str	r2, [r3, #8]
#endif
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	e000ed00 	.word	0xe000ed00
 8000fdc:	40021000 	.word	0x40021000

08000fe0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fe0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001018 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fe4:	f7ff ffc6 	bl	8000f74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000fe8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000fea:	e003      	b.n	8000ff4 <LoopCopyDataInit>

08000fec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000fec:	4b0b      	ldr	r3, [pc, #44]	; (800101c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000fee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ff0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000ff2:	3104      	adds	r1, #4

08000ff4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ff4:	480a      	ldr	r0, [pc, #40]	; (8001020 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000ff6:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ff8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000ffa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ffc:	d3f6      	bcc.n	8000fec <CopyDataInit>
	ldr	r2, =_sbss
 8000ffe:	4a0a      	ldr	r2, [pc, #40]	; (8001028 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001000:	e002      	b.n	8001008 <LoopFillZerobss>

08001002 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001002:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001004:	f842 3b04 	str.w	r3, [r2], #4

08001008 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001008:	4b08      	ldr	r3, [pc, #32]	; (800102c <LoopForever+0x16>)
	cmp	r2, r3
 800100a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800100c:	d3f9      	bcc.n	8001002 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800100e:	f004 fa2d 	bl	800546c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001012:	f7ff fa73 	bl	80004fc <main>

08001016 <LoopForever>:

LoopForever:
    b LoopForever
 8001016:	e7fe      	b.n	8001016 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001018:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 800101c:	0800555c 	.word	0x0800555c
	ldr	r0, =_sdata
 8001020:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001024:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001028:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 800102c:	20000268 	.word	0x20000268

08001030 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001030:	e7fe      	b.n	8001030 <ADC1_IRQHandler>

08001032 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001038:	2300      	movs	r3, #0
 800103a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800103c:	2003      	movs	r0, #3
 800103e:	f000 f981 	bl	8001344 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001042:	2000      	movs	r0, #0
 8001044:	f000 f80e 	bl	8001064 <HAL_InitTick>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d002      	beq.n	8001054 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	71fb      	strb	r3, [r7, #7]
 8001052:	e001      	b.n	8001058 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001054:	f7ff fdd8 	bl	8000c08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001058:	79fb      	ldrb	r3, [r7, #7]
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
	...

08001064 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800106c:	2300      	movs	r3, #0
 800106e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001070:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <HAL_InitTick+0x6c>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d023      	beq.n	80010c0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001078:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <HAL_InitTick+0x70>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <HAL_InitTick+0x6c>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	4619      	mov	r1, r3
 8001082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001086:	fbb3 f3f1 	udiv	r3, r3, r1
 800108a:	fbb2 f3f3 	udiv	r3, r2, r3
 800108e:	4618      	mov	r0, r3
 8001090:	f000 f99b 	bl	80013ca <HAL_SYSTICK_Config>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d10f      	bne.n	80010ba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b0f      	cmp	r3, #15
 800109e:	d809      	bhi.n	80010b4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a0:	2200      	movs	r2, #0
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	f04f 30ff 	mov.w	r0, #4294967295
 80010a8:	f000 f957 	bl	800135a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010ac:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <HAL_InitTick+0x74>)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6013      	str	r3, [r2, #0]
 80010b2:	e007      	b.n	80010c4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	73fb      	strb	r3, [r7, #15]
 80010b8:	e004      	b.n	80010c4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	73fb      	strb	r3, [r7, #15]
 80010be:	e001      	b.n	80010c4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000008 	.word	0x20000008
 80010d4:	20000000 	.word	0x20000000
 80010d8:	20000004 	.word	0x20000004

080010dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_IncTick+0x20>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_IncTick+0x24>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4413      	add	r3, r2
 80010ec:	4a04      	ldr	r2, [pc, #16]	; (8001100 <HAL_IncTick+0x24>)
 80010ee:	6013      	str	r3, [r2, #0]
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	20000008 	.word	0x20000008
 8001100:	20000264 	.word	0x20000264

08001104 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return uwTick;
 8001108:	4b03      	ldr	r3, [pc, #12]	; (8001118 <HAL_GetTick+0x14>)
 800110a:	681b      	ldr	r3, [r3, #0]
}
 800110c:	4618      	mov	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	20000264 	.word	0x20000264

0800111c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001124:	f7ff ffee 	bl	8001104 <HAL_GetTick>
 8001128:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001134:	d005      	beq.n	8001142 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <HAL_Delay+0x40>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	461a      	mov	r2, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4413      	add	r3, r2
 8001140:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001142:	bf00      	nop
 8001144:	f7ff ffde 	bl	8001104 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	429a      	cmp	r2, r3
 8001152:	d8f7      	bhi.n	8001144 <HAL_Delay+0x28>
  {
  }
}
 8001154:	bf00      	nop
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000008 	.word	0x20000008

08001160 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001176:	68ba      	ldr	r2, [r7, #8]
 8001178:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800117c:	4013      	ands	r3, r2
 800117e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001188:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800118c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001190:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001192:	4a04      	ldr	r2, [pc, #16]	; (80011a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	60d3      	str	r3, [r2, #12]
}
 8001198:	bf00      	nop
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011ac:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <__NVIC_GetPriorityGrouping+0x18>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	0a1b      	lsrs	r3, r3, #8
 80011b2:	f003 0307 	and.w	r3, r3, #7
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	db0b      	blt.n	80011ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	f003 021f 	and.w	r2, r3, #31
 80011dc:	4907      	ldr	r1, [pc, #28]	; (80011fc <__NVIC_EnableIRQ+0x38>)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	095b      	lsrs	r3, r3, #5
 80011e4:	2001      	movs	r0, #1
 80011e6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	e000e100 	.word	0xe000e100

08001200 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120e:	2b00      	cmp	r3, #0
 8001210:	db10      	blt.n	8001234 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	f003 021f 	and.w	r2, r3, #31
 8001218:	4909      	ldr	r1, [pc, #36]	; (8001240 <__NVIC_DisableIRQ+0x40>)
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	095b      	lsrs	r3, r3, #5
 8001220:	2001      	movs	r0, #1
 8001222:	fa00 f202 	lsl.w	r2, r0, r2
 8001226:	3320      	adds	r3, #32
 8001228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800122c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001230:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000e100 	.word	0xe000e100

08001244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	6039      	str	r1, [r7, #0]
 800124e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001254:	2b00      	cmp	r3, #0
 8001256:	db0a      	blt.n	800126e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	b2da      	uxtb	r2, r3
 800125c:	490c      	ldr	r1, [pc, #48]	; (8001290 <__NVIC_SetPriority+0x4c>)
 800125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001262:	0112      	lsls	r2, r2, #4
 8001264:	b2d2      	uxtb	r2, r2
 8001266:	440b      	add	r3, r1
 8001268:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800126c:	e00a      	b.n	8001284 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	b2da      	uxtb	r2, r3
 8001272:	4908      	ldr	r1, [pc, #32]	; (8001294 <__NVIC_SetPriority+0x50>)
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	f003 030f 	and.w	r3, r3, #15
 800127a:	3b04      	subs	r3, #4
 800127c:	0112      	lsls	r2, r2, #4
 800127e:	b2d2      	uxtb	r2, r2
 8001280:	440b      	add	r3, r1
 8001282:	761a      	strb	r2, [r3, #24]
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	e000e100 	.word	0xe000e100
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001298:	b480      	push	{r7}
 800129a:	b089      	sub	sp, #36	; 0x24
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	f1c3 0307 	rsb	r3, r3, #7
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	bf28      	it	cs
 80012b6:	2304      	movcs	r3, #4
 80012b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3304      	adds	r3, #4
 80012be:	2b06      	cmp	r3, #6
 80012c0:	d902      	bls.n	80012c8 <NVIC_EncodePriority+0x30>
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	3b03      	subs	r3, #3
 80012c6:	e000      	b.n	80012ca <NVIC_EncodePriority+0x32>
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012cc:	f04f 32ff 	mov.w	r2, #4294967295
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43da      	mvns	r2, r3
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	401a      	ands	r2, r3
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e0:	f04f 31ff 	mov.w	r1, #4294967295
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ea:	43d9      	mvns	r1, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f0:	4313      	orrs	r3, r2
         );
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3724      	adds	r7, #36	; 0x24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
	...

08001300 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3b01      	subs	r3, #1
 800130c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001310:	d301      	bcc.n	8001316 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001312:	2301      	movs	r3, #1
 8001314:	e00f      	b.n	8001336 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001316:	4a0a      	ldr	r2, [pc, #40]	; (8001340 <SysTick_Config+0x40>)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3b01      	subs	r3, #1
 800131c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800131e:	210f      	movs	r1, #15
 8001320:	f04f 30ff 	mov.w	r0, #4294967295
 8001324:	f7ff ff8e 	bl	8001244 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <SysTick_Config+0x40>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800132e:	4b04      	ldr	r3, [pc, #16]	; (8001340 <SysTick_Config+0x40>)
 8001330:	2207      	movs	r2, #7
 8001332:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	e000e010 	.word	0xe000e010

08001344 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff ff07 	bl	8001160 <__NVIC_SetPriorityGrouping>
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b086      	sub	sp, #24
 800135e:	af00      	add	r7, sp, #0
 8001360:	4603      	mov	r3, r0
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	607a      	str	r2, [r7, #4]
 8001366:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800136c:	f7ff ff1c 	bl	80011a8 <__NVIC_GetPriorityGrouping>
 8001370:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	68b9      	ldr	r1, [r7, #8]
 8001376:	6978      	ldr	r0, [r7, #20]
 8001378:	f7ff ff8e 	bl	8001298 <NVIC_EncodePriority>
 800137c:	4602      	mov	r2, r0
 800137e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001382:	4611      	mov	r1, r2
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ff5d 	bl	8001244 <__NVIC_SetPriority>
}
 800138a:	bf00      	nop
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	4603      	mov	r3, r0
 800139a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800139c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff ff0f 	bl	80011c4 <__NVIC_EnableIRQ>
}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b082      	sub	sp, #8
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	4603      	mov	r3, r0
 80013b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80013b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff ff1f 	bl	8001200 <__NVIC_DisableIRQ>
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff ff94 	bl	8001300 <SysTick_Config>
 80013d8:	4603      	mov	r3, r0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d101      	bne.n	80013f6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e08d      	b.n	8001512 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	461a      	mov	r2, r3
 80013fc:	4b47      	ldr	r3, [pc, #284]	; (800151c <HAL_DMA_Init+0x138>)
 80013fe:	429a      	cmp	r2, r3
 8001400:	d80f      	bhi.n	8001422 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	461a      	mov	r2, r3
 8001408:	4b45      	ldr	r3, [pc, #276]	; (8001520 <HAL_DMA_Init+0x13c>)
 800140a:	4413      	add	r3, r2
 800140c:	4a45      	ldr	r2, [pc, #276]	; (8001524 <HAL_DMA_Init+0x140>)
 800140e:	fba2 2303 	umull	r2, r3, r2, r3
 8001412:	091b      	lsrs	r3, r3, #4
 8001414:	009a      	lsls	r2, r3, #2
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a42      	ldr	r2, [pc, #264]	; (8001528 <HAL_DMA_Init+0x144>)
 800141e:	641a      	str	r2, [r3, #64]	; 0x40
 8001420:	e00e      	b.n	8001440 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	461a      	mov	r2, r3
 8001428:	4b40      	ldr	r3, [pc, #256]	; (800152c <HAL_DMA_Init+0x148>)
 800142a:	4413      	add	r3, r2
 800142c:	4a3d      	ldr	r2, [pc, #244]	; (8001524 <HAL_DMA_Init+0x140>)
 800142e:	fba2 2303 	umull	r2, r3, r2, r3
 8001432:	091b      	lsrs	r3, r3, #4
 8001434:	009a      	lsls	r2, r3, #2
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a3c      	ldr	r2, [pc, #240]	; (8001530 <HAL_DMA_Init+0x14c>)
 800143e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2202      	movs	r2, #2
 8001444:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800145a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001464:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001470:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800147c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a1b      	ldr	r3, [r3, #32]
 8001482:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001484:	68fa      	ldr	r2, [r7, #12]
 8001486:	4313      	orrs	r3, r2
 8001488:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f000 f9f2 	bl	800187c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80014a0:	d102      	bne.n	80014a8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685a      	ldr	r2, [r3, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014b0:	b2d2      	uxtb	r2, r2
 80014b2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80014bc:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d010      	beq.n	80014e8 <HAL_DMA_Init+0x104>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	2b04      	cmp	r3, #4
 80014cc:	d80c      	bhi.n	80014e8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f000 fa12 	bl	80018f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	e008      	b.n	80014fa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2201      	movs	r2, #1
 8001504:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40020407 	.word	0x40020407
 8001520:	bffdfff8 	.word	0xbffdfff8
 8001524:	cccccccd 	.word	0xcccccccd
 8001528:	40020000 	.word	0x40020000
 800152c:	bffdfbf8 	.word	0xbffdfbf8
 8001530:	40020400 	.word	0x40020400

08001534 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d101      	bne.n	8001546 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e07b      	b.n	800163e <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f022 0201 	bic.w	r2, r2, #1
 8001554:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	461a      	mov	r2, r3
 800155c:	4b3a      	ldr	r3, [pc, #232]	; (8001648 <HAL_DMA_DeInit+0x114>)
 800155e:	429a      	cmp	r2, r3
 8001560:	d80f      	bhi.n	8001582 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	461a      	mov	r2, r3
 8001568:	4b38      	ldr	r3, [pc, #224]	; (800164c <HAL_DMA_DeInit+0x118>)
 800156a:	4413      	add	r3, r2
 800156c:	4a38      	ldr	r2, [pc, #224]	; (8001650 <HAL_DMA_DeInit+0x11c>)
 800156e:	fba2 2303 	umull	r2, r3, r2, r3
 8001572:	091b      	lsrs	r3, r3, #4
 8001574:	009a      	lsls	r2, r3, #2
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a35      	ldr	r2, [pc, #212]	; (8001654 <HAL_DMA_DeInit+0x120>)
 800157e:	641a      	str	r2, [r3, #64]	; 0x40
 8001580:	e00e      	b.n	80015a0 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	461a      	mov	r2, r3
 8001588:	4b33      	ldr	r3, [pc, #204]	; (8001658 <HAL_DMA_DeInit+0x124>)
 800158a:	4413      	add	r3, r2
 800158c:	4a30      	ldr	r2, [pc, #192]	; (8001650 <HAL_DMA_DeInit+0x11c>)
 800158e:	fba2 2303 	umull	r2, r3, r2, r3
 8001592:	091b      	lsrs	r3, r3, #4
 8001594:	009a      	lsls	r2, r3, #2
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a2f      	ldr	r2, [pc, #188]	; (800165c <HAL_DMA_DeInit+0x128>)
 800159e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ac:	f003 021c 	and.w	r2, r3, #28
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b4:	2101      	movs	r1, #1
 80015b6:	fa01 f202 	lsl.w	r2, r1, r2
 80015ba:	605a      	str	r2, [r3, #4]
#if defined(DMAMUX1)

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f000 f95d 	bl	800187c <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80015d2:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if(((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d00f      	beq.n	80015fc <HAL_DMA_DeInit+0xc8>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2b04      	cmp	r3, #4
 80015e2:	d80b      	bhi.n	80015fc <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f000 f987 	bl	80018f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80015fa:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	65da      	str	r2, [r3, #92]	; 0x5c

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40020407 	.word	0x40020407
 800164c:	bffdfff8 	.word	0xbffdfff8
 8001650:	cccccccd 	.word	0xcccccccd
 8001654:	40020000 	.word	0x40020000
 8001658:	bffdfbf8 	.word	0xbffdfbf8
 800165c:	40020400 	.word	0x40020400

08001660 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001668:	2300      	movs	r3, #0
 800166a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001672:	b2db      	uxtb	r3, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d005      	beq.n	8001684 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2204      	movs	r2, #4
 800167c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	73fb      	strb	r3, [r7, #15]
 8001682:	e047      	b.n	8001714 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f022 020e 	bic.w	r2, r2, #14
 8001692:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f022 0201 	bic.w	r2, r2, #1
 80016a2:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b8:	f003 021c 	and.w	r2, r3, #28
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c0:	2101      	movs	r1, #1
 80016c2:	fa01 f202 	lsl.w	r2, r1, r2
 80016c6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80016d0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d00c      	beq.n	80016f4 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016e8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80016f2:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2201      	movs	r2, #1
 80016f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001708:	2b00      	cmp	r3, #0
 800170a:	d003      	beq.n	8001714 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	4798      	blx	r3
    }
  }
  return status;
 8001714:	7bfb      	ldrb	r3, [r7, #15]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b084      	sub	sp, #16
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173a:	f003 031c 	and.w	r3, r3, #28
 800173e:	2204      	movs	r2, #4
 8001740:	409a      	lsls	r2, r3
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	4013      	ands	r3, r2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d026      	beq.n	8001798 <HAL_DMA_IRQHandler+0x7a>
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	f003 0304 	and.w	r3, r3, #4
 8001750:	2b00      	cmp	r3, #0
 8001752:	d021      	beq.n	8001798 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0320 	and.w	r3, r3, #32
 800175e:	2b00      	cmp	r3, #0
 8001760:	d107      	bne.n	8001772 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 0204 	bic.w	r2, r2, #4
 8001770:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001776:	f003 021c 	and.w	r2, r3, #28
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	2104      	movs	r1, #4
 8001780:	fa01 f202 	lsl.w	r2, r1, r2
 8001784:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	2b00      	cmp	r3, #0
 800178c:	d071      	beq.n	8001872 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001796:	e06c      	b.n	8001872 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179c:	f003 031c 	and.w	r3, r3, #28
 80017a0:	2202      	movs	r2, #2
 80017a2:	409a      	lsls	r2, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4013      	ands	r3, r2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d02e      	beq.n	800180a <HAL_DMA_IRQHandler+0xec>
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d029      	beq.n	800180a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0320 	and.w	r3, r3, #32
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d10b      	bne.n	80017dc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 020a 	bic.w	r2, r2, #10
 80017d2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e0:	f003 021c 	and.w	r2, r3, #28
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e8:	2102      	movs	r1, #2
 80017ea:	fa01 f202 	lsl.w	r2, r1, r2
 80017ee:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d038      	beq.n	8001872 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001808:	e033      	b.n	8001872 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180e:	f003 031c 	and.w	r3, r3, #28
 8001812:	2208      	movs	r2, #8
 8001814:	409a      	lsls	r2, r3
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	4013      	ands	r3, r2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d02a      	beq.n	8001874 <HAL_DMA_IRQHandler+0x156>
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	f003 0308 	and.w	r3, r3, #8
 8001824:	2b00      	cmp	r3, #0
 8001826:	d025      	beq.n	8001874 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 020e 	bic.w	r2, r2, #14
 8001836:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183c:	f003 021c 	and.w	r2, r3, #28
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001844:	2101      	movs	r1, #1
 8001846:	fa01 f202 	lsl.w	r2, r1, r2
 800184a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2201      	movs	r2, #1
 8001850:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2201      	movs	r2, #1
 8001856:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001866:	2b00      	cmp	r3, #0
 8001868:	d004      	beq.n	8001874 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001872:	bf00      	nop
 8001874:	bf00      	nop
}
 8001876:	3710      	adds	r7, #16
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	461a      	mov	r2, r3
 800188a:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800188c:	429a      	cmp	r2, r3
 800188e:	d80a      	bhi.n	80018a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001894:	089b      	lsrs	r3, r3, #2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800189c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	6493      	str	r3, [r2, #72]	; 0x48
 80018a4:	e007      	b.n	80018b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	089b      	lsrs	r3, r3, #2
 80018ac:	009a      	lsls	r2, r3, #2
 80018ae:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80018b0:	4413      	add	r3, r2
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	3b08      	subs	r3, #8
 80018be:	4a0c      	ldr	r2, [pc, #48]	; (80018f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80018c0:	fba2 2303 	umull	r2, r3, r2, r3
 80018c4:	091b      	lsrs	r3, r3, #4
 80018c6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4a0a      	ldr	r2, [pc, #40]	; (80018f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80018cc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f003 031f 	and.w	r3, r3, #31
 80018d4:	2201      	movs	r2, #1
 80018d6:	409a      	lsls	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	651a      	str	r2, [r3, #80]	; 0x50
}
 80018dc:	bf00      	nop
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	40020407 	.word	0x40020407
 80018ec:	4002081c 	.word	0x4002081c
 80018f0:	cccccccd 	.word	0xcccccccd
 80018f4:	40020880 	.word	0x40020880

080018f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	b2db      	uxtb	r3, r3
 8001906:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001908:	68fa      	ldr	r2, [r7, #12]
 800190a:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800190c:	4413      	add	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	461a      	mov	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a08      	ldr	r2, [pc, #32]	; (800193c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800191a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	3b01      	subs	r3, #1
 8001920:	f003 0303 	and.w	r3, r3, #3
 8001924:	2201      	movs	r2, #1
 8001926:	409a      	lsls	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800192c:	bf00      	nop
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	1000823f 	.word	0x1000823f
 800193c:	40020940 	.word	0x40020940

08001940 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001940:	b480      	push	{r7}
 8001942:	b087      	sub	sp, #28
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800194a:	2300      	movs	r3, #0
 800194c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800194e:	e166      	b.n	8001c1e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	2101      	movs	r1, #1
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	fa01 f303 	lsl.w	r3, r1, r3
 800195c:	4013      	ands	r3, r2
 800195e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2b00      	cmp	r3, #0
 8001964:	f000 8158 	beq.w	8001c18 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d00b      	beq.n	8001988 <HAL_GPIO_Init+0x48>
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	2b02      	cmp	r3, #2
 8001976:	d007      	beq.n	8001988 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800197c:	2b11      	cmp	r3, #17
 800197e:	d003      	beq.n	8001988 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b12      	cmp	r3, #18
 8001986:	d130      	bne.n	80019ea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	2203      	movs	r2, #3
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4013      	ands	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	68da      	ldr	r2, [r3, #12]
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019be:	2201      	movs	r2, #1
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	43db      	mvns	r3, r3
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	4013      	ands	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	091b      	lsrs	r3, r3, #4
 80019d4:	f003 0201 	and.w	r2, r3, #1
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	2203      	movs	r2, #3
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43db      	mvns	r3, r3
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	4013      	ands	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	689a      	ldr	r2, [r3, #8]
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d003      	beq.n	8001a2a <HAL_GPIO_Init+0xea>
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b12      	cmp	r3, #18
 8001a28:	d123      	bne.n	8001a72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	08da      	lsrs	r2, r3, #3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	3208      	adds	r2, #8
 8001a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	220f      	movs	r2, #15
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	43db      	mvns	r3, r3
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	691a      	ldr	r2, [r3, #16]
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	f003 0307 	and.w	r3, r3, #7
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	08da      	lsrs	r2, r3, #3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3208      	adds	r2, #8
 8001a6c:	6939      	ldr	r1, [r7, #16]
 8001a6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43db      	mvns	r3, r3
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	4013      	ands	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f003 0203 	and.w	r2, r3, #3
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f000 80b2 	beq.w	8001c18 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab4:	4b61      	ldr	r3, [pc, #388]	; (8001c3c <HAL_GPIO_Init+0x2fc>)
 8001ab6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ab8:	4a60      	ldr	r2, [pc, #384]	; (8001c3c <HAL_GPIO_Init+0x2fc>)
 8001aba:	f043 0301 	orr.w	r3, r3, #1
 8001abe:	6613      	str	r3, [r2, #96]	; 0x60
 8001ac0:	4b5e      	ldr	r3, [pc, #376]	; (8001c3c <HAL_GPIO_Init+0x2fc>)
 8001ac2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	60bb      	str	r3, [r7, #8]
 8001aca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001acc:	4a5c      	ldr	r2, [pc, #368]	; (8001c40 <HAL_GPIO_Init+0x300>)
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	089b      	lsrs	r3, r3, #2
 8001ad2:	3302      	adds	r3, #2
 8001ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	f003 0303 	and.w	r3, r3, #3
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	220f      	movs	r2, #15
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	4013      	ands	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001af6:	d02b      	beq.n	8001b50 <HAL_GPIO_Init+0x210>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a52      	ldr	r2, [pc, #328]	; (8001c44 <HAL_GPIO_Init+0x304>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d025      	beq.n	8001b4c <HAL_GPIO_Init+0x20c>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a51      	ldr	r2, [pc, #324]	; (8001c48 <HAL_GPIO_Init+0x308>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d01f      	beq.n	8001b48 <HAL_GPIO_Init+0x208>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a50      	ldr	r2, [pc, #320]	; (8001c4c <HAL_GPIO_Init+0x30c>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d019      	beq.n	8001b44 <HAL_GPIO_Init+0x204>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a4f      	ldr	r2, [pc, #316]	; (8001c50 <HAL_GPIO_Init+0x310>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d013      	beq.n	8001b40 <HAL_GPIO_Init+0x200>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a4e      	ldr	r2, [pc, #312]	; (8001c54 <HAL_GPIO_Init+0x314>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d00d      	beq.n	8001b3c <HAL_GPIO_Init+0x1fc>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a4d      	ldr	r2, [pc, #308]	; (8001c58 <HAL_GPIO_Init+0x318>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d007      	beq.n	8001b38 <HAL_GPIO_Init+0x1f8>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a4c      	ldr	r2, [pc, #304]	; (8001c5c <HAL_GPIO_Init+0x31c>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d101      	bne.n	8001b34 <HAL_GPIO_Init+0x1f4>
 8001b30:	2307      	movs	r3, #7
 8001b32:	e00e      	b.n	8001b52 <HAL_GPIO_Init+0x212>
 8001b34:	2308      	movs	r3, #8
 8001b36:	e00c      	b.n	8001b52 <HAL_GPIO_Init+0x212>
 8001b38:	2306      	movs	r3, #6
 8001b3a:	e00a      	b.n	8001b52 <HAL_GPIO_Init+0x212>
 8001b3c:	2305      	movs	r3, #5
 8001b3e:	e008      	b.n	8001b52 <HAL_GPIO_Init+0x212>
 8001b40:	2304      	movs	r3, #4
 8001b42:	e006      	b.n	8001b52 <HAL_GPIO_Init+0x212>
 8001b44:	2303      	movs	r3, #3
 8001b46:	e004      	b.n	8001b52 <HAL_GPIO_Init+0x212>
 8001b48:	2302      	movs	r3, #2
 8001b4a:	e002      	b.n	8001b52 <HAL_GPIO_Init+0x212>
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e000      	b.n	8001b52 <HAL_GPIO_Init+0x212>
 8001b50:	2300      	movs	r3, #0
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	f002 0203 	and.w	r2, r2, #3
 8001b58:	0092      	lsls	r2, r2, #2
 8001b5a:	4093      	lsls	r3, r2
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b62:	4937      	ldr	r1, [pc, #220]	; (8001c40 <HAL_GPIO_Init+0x300>)
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	089b      	lsrs	r3, r3, #2
 8001b68:	3302      	adds	r3, #2
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b70:	4b3b      	ldr	r3, [pc, #236]	; (8001c60 <HAL_GPIO_Init+0x320>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b94:	4a32      	ldr	r2, [pc, #200]	; (8001c60 <HAL_GPIO_Init+0x320>)
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001b9a:	4b31      	ldr	r3, [pc, #196]	; (8001c60 <HAL_GPIO_Init+0x320>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bbe:	4a28      	ldr	r2, [pc, #160]	; (8001c60 <HAL_GPIO_Init+0x320>)
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bc4:	4b26      	ldr	r3, [pc, #152]	; (8001c60 <HAL_GPIO_Init+0x320>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d003      	beq.n	8001be8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001be8:	4a1d      	ldr	r2, [pc, #116]	; (8001c60 <HAL_GPIO_Init+0x320>)
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001bee:	4b1c      	ldr	r3, [pc, #112]	; (8001c60 <HAL_GPIO_Init+0x320>)
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c12:	4a13      	ldr	r2, [pc, #76]	; (8001c60 <HAL_GPIO_Init+0x320>)
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	fa22 f303 	lsr.w	r3, r2, r3
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f47f ae91 	bne.w	8001950 <HAL_GPIO_Init+0x10>
  }
}
 8001c2e:	bf00      	nop
 8001c30:	371c      	adds	r7, #28
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	40010000 	.word	0x40010000
 8001c44:	48000400 	.word	0x48000400
 8001c48:	48000800 	.word	0x48000800
 8001c4c:	48000c00 	.word	0x48000c00
 8001c50:	48001000 	.word	0x48001000
 8001c54:	48001400 	.word	0x48001400
 8001c58:	48001800 	.word	0x48001800
 8001c5c:	48001c00 	.word	0x48001c00
 8001c60:	40010400 	.word	0x40010400

08001c64 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b087      	sub	sp, #28
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001c72:	e0c9      	b.n	8001e08 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001c74:	2201      	movs	r2, #1
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f000 80bc 	beq.w	8001e02 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001c8a:	4a66      	ldr	r2, [pc, #408]	; (8001e24 <HAL_GPIO_DeInit+0x1c0>)
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	089b      	lsrs	r3, r3, #2
 8001c90:	3302      	adds	r3, #2
 8001c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c96:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	f003 0303 	and.w	r3, r3, #3
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	220f      	movs	r2, #15
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001cb2:	d02b      	beq.n	8001d0c <HAL_GPIO_DeInit+0xa8>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a5c      	ldr	r2, [pc, #368]	; (8001e28 <HAL_GPIO_DeInit+0x1c4>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d025      	beq.n	8001d08 <HAL_GPIO_DeInit+0xa4>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a5b      	ldr	r2, [pc, #364]	; (8001e2c <HAL_GPIO_DeInit+0x1c8>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d01f      	beq.n	8001d04 <HAL_GPIO_DeInit+0xa0>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a5a      	ldr	r2, [pc, #360]	; (8001e30 <HAL_GPIO_DeInit+0x1cc>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d019      	beq.n	8001d00 <HAL_GPIO_DeInit+0x9c>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a59      	ldr	r2, [pc, #356]	; (8001e34 <HAL_GPIO_DeInit+0x1d0>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d013      	beq.n	8001cfc <HAL_GPIO_DeInit+0x98>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a58      	ldr	r2, [pc, #352]	; (8001e38 <HAL_GPIO_DeInit+0x1d4>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d00d      	beq.n	8001cf8 <HAL_GPIO_DeInit+0x94>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a57      	ldr	r2, [pc, #348]	; (8001e3c <HAL_GPIO_DeInit+0x1d8>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d007      	beq.n	8001cf4 <HAL_GPIO_DeInit+0x90>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a56      	ldr	r2, [pc, #344]	; (8001e40 <HAL_GPIO_DeInit+0x1dc>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d101      	bne.n	8001cf0 <HAL_GPIO_DeInit+0x8c>
 8001cec:	2307      	movs	r3, #7
 8001cee:	e00e      	b.n	8001d0e <HAL_GPIO_DeInit+0xaa>
 8001cf0:	2308      	movs	r3, #8
 8001cf2:	e00c      	b.n	8001d0e <HAL_GPIO_DeInit+0xaa>
 8001cf4:	2306      	movs	r3, #6
 8001cf6:	e00a      	b.n	8001d0e <HAL_GPIO_DeInit+0xaa>
 8001cf8:	2305      	movs	r3, #5
 8001cfa:	e008      	b.n	8001d0e <HAL_GPIO_DeInit+0xaa>
 8001cfc:	2304      	movs	r3, #4
 8001cfe:	e006      	b.n	8001d0e <HAL_GPIO_DeInit+0xaa>
 8001d00:	2303      	movs	r3, #3
 8001d02:	e004      	b.n	8001d0e <HAL_GPIO_DeInit+0xaa>
 8001d04:	2302      	movs	r3, #2
 8001d06:	e002      	b.n	8001d0e <HAL_GPIO_DeInit+0xaa>
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e000      	b.n	8001d0e <HAL_GPIO_DeInit+0xaa>
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	f002 0203 	and.w	r2, r2, #3
 8001d14:	0092      	lsls	r2, r2, #2
 8001d16:	4093      	lsls	r3, r2
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d132      	bne.n	8001d84 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001d1e:	4b49      	ldr	r3, [pc, #292]	; (8001e44 <HAL_GPIO_DeInit+0x1e0>)
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	43db      	mvns	r3, r3
 8001d26:	4947      	ldr	r1, [pc, #284]	; (8001e44 <HAL_GPIO_DeInit+0x1e0>)
 8001d28:	4013      	ands	r3, r2
 8001d2a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001d2c:	4b45      	ldr	r3, [pc, #276]	; (8001e44 <HAL_GPIO_DeInit+0x1e0>)
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	43db      	mvns	r3, r3
 8001d34:	4943      	ldr	r1, [pc, #268]	; (8001e44 <HAL_GPIO_DeInit+0x1e0>)
 8001d36:	4013      	ands	r3, r2
 8001d38:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8001d3a:	4b42      	ldr	r3, [pc, #264]	; (8001e44 <HAL_GPIO_DeInit+0x1e0>)
 8001d3c:	689a      	ldr	r2, [r3, #8]
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	43db      	mvns	r3, r3
 8001d42:	4940      	ldr	r1, [pc, #256]	; (8001e44 <HAL_GPIO_DeInit+0x1e0>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8001d48:	4b3e      	ldr	r3, [pc, #248]	; (8001e44 <HAL_GPIO_DeInit+0x1e0>)
 8001d4a:	68da      	ldr	r2, [r3, #12]
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	493c      	ldr	r1, [pc, #240]	; (8001e44 <HAL_GPIO_DeInit+0x1e0>)
 8001d52:	4013      	ands	r3, r2
 8001d54:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	f003 0303 	and.w	r3, r3, #3
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	220f      	movs	r2, #15
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001d66:	4a2f      	ldr	r2, [pc, #188]	; (8001e24 <HAL_GPIO_DeInit+0x1c0>)
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	089b      	lsrs	r3, r3, #2
 8001d6c:	3302      	adds	r3, #2
 8001d6e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	43da      	mvns	r2, r3
 8001d76:	482b      	ldr	r0, [pc, #172]	; (8001e24 <HAL_GPIO_DeInit+0x1c0>)
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	089b      	lsrs	r3, r3, #2
 8001d7c:	400a      	ands	r2, r1
 8001d7e:	3302      	adds	r3, #2
 8001d80:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	2103      	movs	r1, #3
 8001d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d92:	431a      	orrs	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	08da      	lsrs	r2, r3, #3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3208      	adds	r2, #8
 8001da0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	220f      	movs	r2, #15
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43db      	mvns	r3, r3
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	08d2      	lsrs	r2, r2, #3
 8001db8:	4019      	ands	r1, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	3208      	adds	r2, #8
 8001dbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689a      	ldr	r2, [r3, #8]
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	2103      	movs	r1, #3
 8001dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	401a      	ands	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	2101      	movs	r1, #1
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	fa01 f303 	lsl.w	r3, r1, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	401a      	ands	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68da      	ldr	r2, [r3, #12]
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	2103      	movs	r1, #3
 8001df6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	401a      	ands	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	3301      	adds	r3, #1
 8001e06:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f47f af2f 	bne.w	8001c74 <HAL_GPIO_DeInit+0x10>
  }
}
 8001e16:	bf00      	nop
 8001e18:	371c      	adds	r7, #28
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	40010000 	.word	0x40010000
 8001e28:	48000400 	.word	0x48000400
 8001e2c:	48000800 	.word	0x48000800
 8001e30:	48000c00 	.word	0x48000c00
 8001e34:	48001000 	.word	0x48001000
 8001e38:	48001400 	.word	0x48001400
 8001e3c:	48001800 	.word	0x48001800
 8001e40:	48001c00 	.word	0x48001c00
 8001e44:	40010400 	.word	0x40010400

08001e48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	807b      	strh	r3, [r7, #2]
 8001e54:	4613      	mov	r3, r2
 8001e56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e58:	787b      	ldrb	r3, [r7, #1]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e5e:	887a      	ldrh	r2, [r7, #2]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e64:	e002      	b.n	8001e6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e66:	887a      	ldrh	r2, [r7, #2]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	460b      	mov	r3, r1
 8001e82:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e8a:	887a      	ldrh	r2, [r7, #2]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	041a      	lsls	r2, r3, #16
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	43d9      	mvns	r1, r3
 8001e96:	887b      	ldrh	r3, [r7, #2]
 8001e98:	400b      	ands	r3, r1
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	619a      	str	r2, [r3, #24]
}
 8001ea0:	bf00      	nop
 8001ea2:	3714      	adds	r7, #20
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001eb0:	4b0d      	ldr	r3, [pc, #52]	; (8001ee8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ebc:	d102      	bne.n	8001ec4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001ebe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ec2:	e00b      	b.n	8001edc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001ec4:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ece:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ed2:	d102      	bne.n	8001eda <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001ed4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ed8:	e000      	b.n	8001edc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001eda:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40007000 	.word	0x40007000

08001eec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d141      	bne.n	8001f7e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001efa:	4b4b      	ldr	r3, [pc, #300]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f06:	d131      	bne.n	8001f6c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f08:	4b47      	ldr	r3, [pc, #284]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f0e:	4a46      	ldr	r2, [pc, #280]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f14:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f18:	4b43      	ldr	r3, [pc, #268]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f20:	4a41      	ldr	r2, [pc, #260]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f26:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001f28:	4b40      	ldr	r3, [pc, #256]	; (800202c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2232      	movs	r2, #50	; 0x32
 8001f2e:	fb02 f303 	mul.w	r3, r2, r3
 8001f32:	4a3f      	ldr	r2, [pc, #252]	; (8002030 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f34:	fba2 2303 	umull	r2, r3, r2, r3
 8001f38:	0c9b      	lsrs	r3, r3, #18
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f3e:	e002      	b.n	8001f46 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f46:	4b38      	ldr	r3, [pc, #224]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f52:	d102      	bne.n	8001f5a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1f2      	bne.n	8001f40 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f5a:	4b33      	ldr	r3, [pc, #204]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f66:	d158      	bne.n	800201a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e057      	b.n	800201c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f6c:	4b2e      	ldr	r3, [pc, #184]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f72:	4a2d      	ldr	r2, [pc, #180]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001f7c:	e04d      	b.n	800201a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f84:	d141      	bne.n	800200a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f86:	4b28      	ldr	r3, [pc, #160]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f92:	d131      	bne.n	8001ff8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f94:	4b24      	ldr	r3, [pc, #144]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f9a:	4a23      	ldr	r2, [pc, #140]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fa4:	4b20      	ldr	r3, [pc, #128]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fac:	4a1e      	ldr	r2, [pc, #120]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fb2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001fb4:	4b1d      	ldr	r3, [pc, #116]	; (800202c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2232      	movs	r2, #50	; 0x32
 8001fba:	fb02 f303 	mul.w	r3, r2, r3
 8001fbe:	4a1c      	ldr	r2, [pc, #112]	; (8002030 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc4:	0c9b      	lsrs	r3, r3, #18
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fca:	e002      	b.n	8001fd2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fd2:	4b15      	ldr	r3, [pc, #84]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fde:	d102      	bne.n	8001fe6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f2      	bne.n	8001fcc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fe6:	4b10      	ldr	r3, [pc, #64]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ff2:	d112      	bne.n	800201a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e011      	b.n	800201c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ff8:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ffe:	4a0a      	ldr	r2, [pc, #40]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002004:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002008:	e007      	b.n	800201a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800200a:	4b07      	ldr	r3, [pc, #28]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002012:	4a05      	ldr	r2, [pc, #20]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002014:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002018:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	40007000 	.word	0x40007000
 800202c:	20000000 	.word	0x20000000
 8002030:	431bde83 	.word	0x431bde83

08002034 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002038:	4b05      	ldr	r3, [pc, #20]	; (8002050 <HAL_PWREx_EnableVddIO2+0x1c>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	4a04      	ldr	r2, [pc, #16]	; (8002050 <HAL_PWREx_EnableVddIO2+0x1c>)
 800203e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002042:	6053      	str	r3, [r2, #4]
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	40007000 	.word	0x40007000

08002054 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b088      	sub	sp, #32
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d102      	bne.n	8002068 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	f000 bc16 	b.w	8002894 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002068:	4ba0      	ldr	r3, [pc, #640]	; (80022ec <HAL_RCC_OscConfig+0x298>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 030c 	and.w	r3, r3, #12
 8002070:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002072:	4b9e      	ldr	r3, [pc, #632]	; (80022ec <HAL_RCC_OscConfig+0x298>)
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0310 	and.w	r3, r3, #16
 8002084:	2b00      	cmp	r3, #0
 8002086:	f000 80e4 	beq.w	8002252 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d007      	beq.n	80020a0 <HAL_RCC_OscConfig+0x4c>
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	2b0c      	cmp	r3, #12
 8002094:	f040 808b 	bne.w	80021ae <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	2b01      	cmp	r3, #1
 800209c:	f040 8087 	bne.w	80021ae <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020a0:	4b92      	ldr	r3, [pc, #584]	; (80022ec <HAL_RCC_OscConfig+0x298>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d005      	beq.n	80020b8 <HAL_RCC_OscConfig+0x64>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d101      	bne.n	80020b8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e3ed      	b.n	8002894 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a1a      	ldr	r2, [r3, #32]
 80020bc:	4b8b      	ldr	r3, [pc, #556]	; (80022ec <HAL_RCC_OscConfig+0x298>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0308 	and.w	r3, r3, #8
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d004      	beq.n	80020d2 <HAL_RCC_OscConfig+0x7e>
 80020c8:	4b88      	ldr	r3, [pc, #544]	; (80022ec <HAL_RCC_OscConfig+0x298>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020d0:	e005      	b.n	80020de <HAL_RCC_OscConfig+0x8a>
 80020d2:	4b86      	ldr	r3, [pc, #536]	; (80022ec <HAL_RCC_OscConfig+0x298>)
 80020d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020d8:	091b      	lsrs	r3, r3, #4
 80020da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020de:	4293      	cmp	r3, r2
 80020e0:	d223      	bcs.n	800212a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f000 fdfc 	bl	8002ce4 <RCC_SetFlashLatencyFromMSIRange>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e3ce      	b.n	8002894 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020f6:	4b7d      	ldr	r3, [pc, #500]	; (80022ec <HAL_RCC_OscConfig+0x298>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a7c      	ldr	r2, [pc, #496]	; (80022ec <HAL_RCC_OscConfig+0x298>)
 80020fc:	f043 0308 	orr.w	r3, r3, #8
 8002100:	6013      	str	r3, [r2, #0]
 8002102:	4b7a      	ldr	r3, [pc, #488]	; (80022ec <HAL_RCC_OscConfig+0x298>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	4977      	ldr	r1, [pc, #476]	; (80022ec <HAL_RCC_OscConfig+0x298>)
 8002110:	4313      	orrs	r3, r2
 8002112:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002114:	4b75      	ldr	r3, [pc, #468]	; (80022ec <HAL_RCC_OscConfig+0x298>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	69db      	ldr	r3, [r3, #28]
 8002120:	021b      	lsls	r3, r3, #8
 8002122:	4972      	ldr	r1, [pc, #456]	; (80022ec <HAL_RCC_OscConfig+0x298>)
 8002124:	4313      	orrs	r3, r2
 8002126:	604b      	str	r3, [r1, #4]
 8002128:	e025      	b.n	8002176 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800212a:	4b70      	ldr	r3, [pc, #448]	; (80022ec <HAL_RCC_OscConfig+0x298>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a6f      	ldr	r2, [pc, #444]	; (80022ec <HAL_RCC_OscConfig+0x298>)
 8002130:	f043 0308 	orr.w	r3, r3, #8
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	4b6d      	ldr	r3, [pc, #436]	; (80022ec <HAL_RCC_OscConfig+0x298>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	496a      	ldr	r1, [pc, #424]	; (80022ec <HAL_RCC_OscConfig+0x298>)
 8002144:	4313      	orrs	r3, r2
 8002146:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002148:	4b68      	ldr	r3, [pc, #416]	; (80022ec <HAL_RCC_OscConfig+0x298>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	69db      	ldr	r3, [r3, #28]
 8002154:	021b      	lsls	r3, r3, #8
 8002156:	4965      	ldr	r1, [pc, #404]	; (80022ec <HAL_RCC_OscConfig+0x298>)
 8002158:	4313      	orrs	r3, r2
 800215a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d109      	bne.n	8002176 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a1b      	ldr	r3, [r3, #32]
 8002166:	4618      	mov	r0, r3
 8002168:	f000 fdbc 	bl	8002ce4 <RCC_SetFlashLatencyFromMSIRange>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e38e      	b.n	8002894 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002176:	f000 fcf3 	bl	8002b60 <HAL_RCC_GetSysClockFreq>
 800217a:	4601      	mov	r1, r0
 800217c:	4b5b      	ldr	r3, [pc, #364]	; (80022ec <HAL_RCC_OscConfig+0x298>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	091b      	lsrs	r3, r3, #4
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	4a5a      	ldr	r2, [pc, #360]	; (80022f0 <HAL_RCC_OscConfig+0x29c>)
 8002188:	5cd3      	ldrb	r3, [r2, r3]
 800218a:	f003 031f 	and.w	r3, r3, #31
 800218e:	fa21 f303 	lsr.w	r3, r1, r3
 8002192:	4a58      	ldr	r2, [pc, #352]	; (80022f4 <HAL_RCC_OscConfig+0x2a0>)
 8002194:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002196:	4b58      	ldr	r3, [pc, #352]	; (80022f8 <HAL_RCC_OscConfig+0x2a4>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f7fe ff62 	bl	8001064 <HAL_InitTick>
 80021a0:	4603      	mov	r3, r0
 80021a2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d052      	beq.n	8002250 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80021aa:	7bfb      	ldrb	r3, [r7, #15]
 80021ac:	e372      	b.n	8002894 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d032      	beq.n	800221c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021b6:	4b4d      	ldr	r3, [pc, #308]	; (80022ec <HAL_RCC_OscConfig+0x298>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a4c      	ldr	r2, [pc, #304]	; (80022ec <HAL_RCC_OscConfig+0x298>)
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021c2:	f7fe ff9f 	bl	8001104 <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021c8:	e008      	b.n	80021dc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021ca:	f7fe ff9b 	bl	8001104 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e35b      	b.n	8002894 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021dc:	4b43      	ldr	r3, [pc, #268]	; (80022ec <HAL_RCC_OscConfig+0x298>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d0f0      	beq.n	80021ca <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021e8:	4b40      	ldr	r3, [pc, #256]	; (80022ec <HAL_RCC_OscConfig+0x298>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a3f      	ldr	r2, [pc, #252]	; (80022ec <HAL_RCC_OscConfig+0x298>)
 80021ee:	f043 0308 	orr.w	r3, r3, #8
 80021f2:	6013      	str	r3, [r2, #0]
 80021f4:	4b3d      	ldr	r3, [pc, #244]	; (80022ec <HAL_RCC_OscConfig+0x298>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	493a      	ldr	r1, [pc, #232]	; (80022ec <HAL_RCC_OscConfig+0x298>)
 8002202:	4313      	orrs	r3, r2
 8002204:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002206:	4b39      	ldr	r3, [pc, #228]	; (80022ec <HAL_RCC_OscConfig+0x298>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	021b      	lsls	r3, r3, #8
 8002214:	4935      	ldr	r1, [pc, #212]	; (80022ec <HAL_RCC_OscConfig+0x298>)
 8002216:	4313      	orrs	r3, r2
 8002218:	604b      	str	r3, [r1, #4]
 800221a:	e01a      	b.n	8002252 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800221c:	4b33      	ldr	r3, [pc, #204]	; (80022ec <HAL_RCC_OscConfig+0x298>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a32      	ldr	r2, [pc, #200]	; (80022ec <HAL_RCC_OscConfig+0x298>)
 8002222:	f023 0301 	bic.w	r3, r3, #1
 8002226:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002228:	f7fe ff6c 	bl	8001104 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002230:	f7fe ff68 	bl	8001104 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e328      	b.n	8002894 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002242:	4b2a      	ldr	r3, [pc, #168]	; (80022ec <HAL_RCC_OscConfig+0x298>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1f0      	bne.n	8002230 <HAL_RCC_OscConfig+0x1dc>
 800224e:	e000      	b.n	8002252 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002250:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b00      	cmp	r3, #0
 800225c:	d073      	beq.n	8002346 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	2b08      	cmp	r3, #8
 8002262:	d005      	beq.n	8002270 <HAL_RCC_OscConfig+0x21c>
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	2b0c      	cmp	r3, #12
 8002268:	d10e      	bne.n	8002288 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	2b03      	cmp	r3, #3
 800226e:	d10b      	bne.n	8002288 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002270:	4b1e      	ldr	r3, [pc, #120]	; (80022ec <HAL_RCC_OscConfig+0x298>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d063      	beq.n	8002344 <HAL_RCC_OscConfig+0x2f0>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d15f      	bne.n	8002344 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e305      	b.n	8002894 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002290:	d106      	bne.n	80022a0 <HAL_RCC_OscConfig+0x24c>
 8002292:	4b16      	ldr	r3, [pc, #88]	; (80022ec <HAL_RCC_OscConfig+0x298>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a15      	ldr	r2, [pc, #84]	; (80022ec <HAL_RCC_OscConfig+0x298>)
 8002298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800229c:	6013      	str	r3, [r2, #0]
 800229e:	e01d      	b.n	80022dc <HAL_RCC_OscConfig+0x288>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022a8:	d10c      	bne.n	80022c4 <HAL_RCC_OscConfig+0x270>
 80022aa:	4b10      	ldr	r3, [pc, #64]	; (80022ec <HAL_RCC_OscConfig+0x298>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a0f      	ldr	r2, [pc, #60]	; (80022ec <HAL_RCC_OscConfig+0x298>)
 80022b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	4b0d      	ldr	r3, [pc, #52]	; (80022ec <HAL_RCC_OscConfig+0x298>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a0c      	ldr	r2, [pc, #48]	; (80022ec <HAL_RCC_OscConfig+0x298>)
 80022bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	e00b      	b.n	80022dc <HAL_RCC_OscConfig+0x288>
 80022c4:	4b09      	ldr	r3, [pc, #36]	; (80022ec <HAL_RCC_OscConfig+0x298>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a08      	ldr	r2, [pc, #32]	; (80022ec <HAL_RCC_OscConfig+0x298>)
 80022ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ce:	6013      	str	r3, [r2, #0]
 80022d0:	4b06      	ldr	r3, [pc, #24]	; (80022ec <HAL_RCC_OscConfig+0x298>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a05      	ldr	r2, [pc, #20]	; (80022ec <HAL_RCC_OscConfig+0x298>)
 80022d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d01b      	beq.n	800231c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e4:	f7fe ff0e 	bl	8001104 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022ea:	e010      	b.n	800230e <HAL_RCC_OscConfig+0x2ba>
 80022ec:	40021000 	.word	0x40021000
 80022f0:	080054ec 	.word	0x080054ec
 80022f4:	20000000 	.word	0x20000000
 80022f8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022fc:	f7fe ff02 	bl	8001104 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b64      	cmp	r3, #100	; 0x64
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e2c2      	b.n	8002894 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800230e:	4baf      	ldr	r3, [pc, #700]	; (80025cc <HAL_RCC_OscConfig+0x578>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d0f0      	beq.n	80022fc <HAL_RCC_OscConfig+0x2a8>
 800231a:	e014      	b.n	8002346 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231c:	f7fe fef2 	bl	8001104 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002324:	f7fe feee 	bl	8001104 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b64      	cmp	r3, #100	; 0x64
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e2ae      	b.n	8002894 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002336:	4ba5      	ldr	r3, [pc, #660]	; (80025cc <HAL_RCC_OscConfig+0x578>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1f0      	bne.n	8002324 <HAL_RCC_OscConfig+0x2d0>
 8002342:	e000      	b.n	8002346 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002344:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d060      	beq.n	8002414 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	2b04      	cmp	r3, #4
 8002356:	d005      	beq.n	8002364 <HAL_RCC_OscConfig+0x310>
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	2b0c      	cmp	r3, #12
 800235c:	d119      	bne.n	8002392 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	2b02      	cmp	r3, #2
 8002362:	d116      	bne.n	8002392 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002364:	4b99      	ldr	r3, [pc, #612]	; (80025cc <HAL_RCC_OscConfig+0x578>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800236c:	2b00      	cmp	r3, #0
 800236e:	d005      	beq.n	800237c <HAL_RCC_OscConfig+0x328>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e28b      	b.n	8002894 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800237c:	4b93      	ldr	r3, [pc, #588]	; (80025cc <HAL_RCC_OscConfig+0x578>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	061b      	lsls	r3, r3, #24
 800238a:	4990      	ldr	r1, [pc, #576]	; (80025cc <HAL_RCC_OscConfig+0x578>)
 800238c:	4313      	orrs	r3, r2
 800238e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002390:	e040      	b.n	8002414 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d023      	beq.n	80023e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800239a:	4b8c      	ldr	r3, [pc, #560]	; (80025cc <HAL_RCC_OscConfig+0x578>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a8b      	ldr	r2, [pc, #556]	; (80025cc <HAL_RCC_OscConfig+0x578>)
 80023a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a6:	f7fe fead 	bl	8001104 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ae:	f7fe fea9 	bl	8001104 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e269      	b.n	8002894 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023c0:	4b82      	ldr	r3, [pc, #520]	; (80025cc <HAL_RCC_OscConfig+0x578>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0f0      	beq.n	80023ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023cc:	4b7f      	ldr	r3, [pc, #508]	; (80025cc <HAL_RCC_OscConfig+0x578>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	061b      	lsls	r3, r3, #24
 80023da:	497c      	ldr	r1, [pc, #496]	; (80025cc <HAL_RCC_OscConfig+0x578>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	604b      	str	r3, [r1, #4]
 80023e0:	e018      	b.n	8002414 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023e2:	4b7a      	ldr	r3, [pc, #488]	; (80025cc <HAL_RCC_OscConfig+0x578>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a79      	ldr	r2, [pc, #484]	; (80025cc <HAL_RCC_OscConfig+0x578>)
 80023e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ee:	f7fe fe89 	bl	8001104 <HAL_GetTick>
 80023f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023f4:	e008      	b.n	8002408 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023f6:	f7fe fe85 	bl	8001104 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e245      	b.n	8002894 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002408:	4b70      	ldr	r3, [pc, #448]	; (80025cc <HAL_RCC_OscConfig+0x578>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1f0      	bne.n	80023f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0308 	and.w	r3, r3, #8
 800241c:	2b00      	cmp	r3, #0
 800241e:	d03c      	beq.n	800249a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d01c      	beq.n	8002462 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002428:	4b68      	ldr	r3, [pc, #416]	; (80025cc <HAL_RCC_OscConfig+0x578>)
 800242a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800242e:	4a67      	ldr	r2, [pc, #412]	; (80025cc <HAL_RCC_OscConfig+0x578>)
 8002430:	f043 0301 	orr.w	r3, r3, #1
 8002434:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002438:	f7fe fe64 	bl	8001104 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002440:	f7fe fe60 	bl	8001104 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e220      	b.n	8002894 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002452:	4b5e      	ldr	r3, [pc, #376]	; (80025cc <HAL_RCC_OscConfig+0x578>)
 8002454:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0ef      	beq.n	8002440 <HAL_RCC_OscConfig+0x3ec>
 8002460:	e01b      	b.n	800249a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002462:	4b5a      	ldr	r3, [pc, #360]	; (80025cc <HAL_RCC_OscConfig+0x578>)
 8002464:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002468:	4a58      	ldr	r2, [pc, #352]	; (80025cc <HAL_RCC_OscConfig+0x578>)
 800246a:	f023 0301 	bic.w	r3, r3, #1
 800246e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002472:	f7fe fe47 	bl	8001104 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800247a:	f7fe fe43 	bl	8001104 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e203      	b.n	8002894 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800248c:	4b4f      	ldr	r3, [pc, #316]	; (80025cc <HAL_RCC_OscConfig+0x578>)
 800248e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1ef      	bne.n	800247a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0304 	and.w	r3, r3, #4
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 80a6 	beq.w	80025f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024a8:	2300      	movs	r3, #0
 80024aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80024ac:	4b47      	ldr	r3, [pc, #284]	; (80025cc <HAL_RCC_OscConfig+0x578>)
 80024ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d10d      	bne.n	80024d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024b8:	4b44      	ldr	r3, [pc, #272]	; (80025cc <HAL_RCC_OscConfig+0x578>)
 80024ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024bc:	4a43      	ldr	r2, [pc, #268]	; (80025cc <HAL_RCC_OscConfig+0x578>)
 80024be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c2:	6593      	str	r3, [r2, #88]	; 0x58
 80024c4:	4b41      	ldr	r3, [pc, #260]	; (80025cc <HAL_RCC_OscConfig+0x578>)
 80024c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024cc:	60bb      	str	r3, [r7, #8]
 80024ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024d0:	2301      	movs	r3, #1
 80024d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024d4:	4b3e      	ldr	r3, [pc, #248]	; (80025d0 <HAL_RCC_OscConfig+0x57c>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d118      	bne.n	8002512 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024e0:	4b3b      	ldr	r3, [pc, #236]	; (80025d0 <HAL_RCC_OscConfig+0x57c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a3a      	ldr	r2, [pc, #232]	; (80025d0 <HAL_RCC_OscConfig+0x57c>)
 80024e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ec:	f7fe fe0a 	bl	8001104 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024f4:	f7fe fe06 	bl	8001104 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e1c6      	b.n	8002894 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002506:	4b32      	ldr	r3, [pc, #200]	; (80025d0 <HAL_RCC_OscConfig+0x57c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0f0      	beq.n	80024f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d108      	bne.n	800252c <HAL_RCC_OscConfig+0x4d8>
 800251a:	4b2c      	ldr	r3, [pc, #176]	; (80025cc <HAL_RCC_OscConfig+0x578>)
 800251c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002520:	4a2a      	ldr	r2, [pc, #168]	; (80025cc <HAL_RCC_OscConfig+0x578>)
 8002522:	f043 0301 	orr.w	r3, r3, #1
 8002526:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800252a:	e024      	b.n	8002576 <HAL_RCC_OscConfig+0x522>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	2b05      	cmp	r3, #5
 8002532:	d110      	bne.n	8002556 <HAL_RCC_OscConfig+0x502>
 8002534:	4b25      	ldr	r3, [pc, #148]	; (80025cc <HAL_RCC_OscConfig+0x578>)
 8002536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253a:	4a24      	ldr	r2, [pc, #144]	; (80025cc <HAL_RCC_OscConfig+0x578>)
 800253c:	f043 0304 	orr.w	r3, r3, #4
 8002540:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002544:	4b21      	ldr	r3, [pc, #132]	; (80025cc <HAL_RCC_OscConfig+0x578>)
 8002546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800254a:	4a20      	ldr	r2, [pc, #128]	; (80025cc <HAL_RCC_OscConfig+0x578>)
 800254c:	f043 0301 	orr.w	r3, r3, #1
 8002550:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002554:	e00f      	b.n	8002576 <HAL_RCC_OscConfig+0x522>
 8002556:	4b1d      	ldr	r3, [pc, #116]	; (80025cc <HAL_RCC_OscConfig+0x578>)
 8002558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800255c:	4a1b      	ldr	r2, [pc, #108]	; (80025cc <HAL_RCC_OscConfig+0x578>)
 800255e:	f023 0301 	bic.w	r3, r3, #1
 8002562:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002566:	4b19      	ldr	r3, [pc, #100]	; (80025cc <HAL_RCC_OscConfig+0x578>)
 8002568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800256c:	4a17      	ldr	r2, [pc, #92]	; (80025cc <HAL_RCC_OscConfig+0x578>)
 800256e:	f023 0304 	bic.w	r3, r3, #4
 8002572:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d016      	beq.n	80025ac <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800257e:	f7fe fdc1 	bl	8001104 <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002584:	e00a      	b.n	800259c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002586:	f7fe fdbd 	bl	8001104 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	f241 3288 	movw	r2, #5000	; 0x1388
 8002594:	4293      	cmp	r3, r2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e17b      	b.n	8002894 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800259c:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <HAL_RCC_OscConfig+0x578>)
 800259e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0ed      	beq.n	8002586 <HAL_RCC_OscConfig+0x532>
 80025aa:	e01a      	b.n	80025e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ac:	f7fe fdaa 	bl	8001104 <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025b2:	e00f      	b.n	80025d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025b4:	f7fe fda6 	bl	8001104 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d906      	bls.n	80025d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e164      	b.n	8002894 <HAL_RCC_OscConfig+0x840>
 80025ca:	bf00      	nop
 80025cc:	40021000 	.word	0x40021000
 80025d0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025d4:	4ba8      	ldr	r3, [pc, #672]	; (8002878 <HAL_RCC_OscConfig+0x824>)
 80025d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1e8      	bne.n	80025b4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025e2:	7ffb      	ldrb	r3, [r7, #31]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d105      	bne.n	80025f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e8:	4ba3      	ldr	r3, [pc, #652]	; (8002878 <HAL_RCC_OscConfig+0x824>)
 80025ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ec:	4aa2      	ldr	r2, [pc, #648]	; (8002878 <HAL_RCC_OscConfig+0x824>)
 80025ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025f2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0320 	and.w	r3, r3, #32
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d03c      	beq.n	800267a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002604:	2b00      	cmp	r3, #0
 8002606:	d01c      	beq.n	8002642 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002608:	4b9b      	ldr	r3, [pc, #620]	; (8002878 <HAL_RCC_OscConfig+0x824>)
 800260a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800260e:	4a9a      	ldr	r2, [pc, #616]	; (8002878 <HAL_RCC_OscConfig+0x824>)
 8002610:	f043 0301 	orr.w	r3, r3, #1
 8002614:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002618:	f7fe fd74 	bl	8001104 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002620:	f7fe fd70 	bl	8001104 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e130      	b.n	8002894 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002632:	4b91      	ldr	r3, [pc, #580]	; (8002878 <HAL_RCC_OscConfig+0x824>)
 8002634:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0ef      	beq.n	8002620 <HAL_RCC_OscConfig+0x5cc>
 8002640:	e01b      	b.n	800267a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002642:	4b8d      	ldr	r3, [pc, #564]	; (8002878 <HAL_RCC_OscConfig+0x824>)
 8002644:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002648:	4a8b      	ldr	r2, [pc, #556]	; (8002878 <HAL_RCC_OscConfig+0x824>)
 800264a:	f023 0301 	bic.w	r3, r3, #1
 800264e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002652:	f7fe fd57 	bl	8001104 <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800265a:	f7fe fd53 	bl	8001104 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e113      	b.n	8002894 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800266c:	4b82      	ldr	r3, [pc, #520]	; (8002878 <HAL_RCC_OscConfig+0x824>)
 800266e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1ef      	bne.n	800265a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267e:	2b00      	cmp	r3, #0
 8002680:	f000 8107 	beq.w	8002892 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002688:	2b02      	cmp	r3, #2
 800268a:	f040 80cb 	bne.w	8002824 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800268e:	4b7a      	ldr	r3, [pc, #488]	; (8002878 <HAL_RCC_OscConfig+0x824>)
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	f003 0203 	and.w	r2, r3, #3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269e:	429a      	cmp	r2, r3
 80026a0:	d12c      	bne.n	80026fc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ac:	3b01      	subs	r3, #1
 80026ae:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d123      	bne.n	80026fc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026be:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d11b      	bne.n	80026fc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ce:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d113      	bne.n	80026fc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026de:	085b      	lsrs	r3, r3, #1
 80026e0:	3b01      	subs	r3, #1
 80026e2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d109      	bne.n	80026fc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	085b      	lsrs	r3, r3, #1
 80026f4:	3b01      	subs	r3, #1
 80026f6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d06d      	beq.n	80027d8 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	2b0c      	cmp	r3, #12
 8002700:	d068      	beq.n	80027d4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002702:	4b5d      	ldr	r3, [pc, #372]	; (8002878 <HAL_RCC_OscConfig+0x824>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d105      	bne.n	800271a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800270e:	4b5a      	ldr	r3, [pc, #360]	; (8002878 <HAL_RCC_OscConfig+0x824>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e0ba      	b.n	8002894 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800271e:	4b56      	ldr	r3, [pc, #344]	; (8002878 <HAL_RCC_OscConfig+0x824>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a55      	ldr	r2, [pc, #340]	; (8002878 <HAL_RCC_OscConfig+0x824>)
 8002724:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002728:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800272a:	f7fe fceb 	bl	8001104 <HAL_GetTick>
 800272e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002732:	f7fe fce7 	bl	8001104 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e0a7      	b.n	8002894 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002744:	4b4c      	ldr	r3, [pc, #304]	; (8002878 <HAL_RCC_OscConfig+0x824>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1f0      	bne.n	8002732 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002750:	4b49      	ldr	r3, [pc, #292]	; (8002878 <HAL_RCC_OscConfig+0x824>)
 8002752:	68da      	ldr	r2, [r3, #12]
 8002754:	4b49      	ldr	r3, [pc, #292]	; (800287c <HAL_RCC_OscConfig+0x828>)
 8002756:	4013      	ands	r3, r2
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002760:	3a01      	subs	r2, #1
 8002762:	0112      	lsls	r2, r2, #4
 8002764:	4311      	orrs	r1, r2
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800276a:	0212      	lsls	r2, r2, #8
 800276c:	4311      	orrs	r1, r2
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002772:	0852      	lsrs	r2, r2, #1
 8002774:	3a01      	subs	r2, #1
 8002776:	0552      	lsls	r2, r2, #21
 8002778:	4311      	orrs	r1, r2
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800277e:	0852      	lsrs	r2, r2, #1
 8002780:	3a01      	subs	r2, #1
 8002782:	0652      	lsls	r2, r2, #25
 8002784:	4311      	orrs	r1, r2
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800278a:	06d2      	lsls	r2, r2, #27
 800278c:	430a      	orrs	r2, r1
 800278e:	493a      	ldr	r1, [pc, #232]	; (8002878 <HAL_RCC_OscConfig+0x824>)
 8002790:	4313      	orrs	r3, r2
 8002792:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002794:	4b38      	ldr	r3, [pc, #224]	; (8002878 <HAL_RCC_OscConfig+0x824>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a37      	ldr	r2, [pc, #220]	; (8002878 <HAL_RCC_OscConfig+0x824>)
 800279a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800279e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027a0:	4b35      	ldr	r3, [pc, #212]	; (8002878 <HAL_RCC_OscConfig+0x824>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	4a34      	ldr	r2, [pc, #208]	; (8002878 <HAL_RCC_OscConfig+0x824>)
 80027a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027ac:	f7fe fcaa 	bl	8001104 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b4:	f7fe fca6 	bl	8001104 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e066      	b.n	8002894 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027c6:	4b2c      	ldr	r3, [pc, #176]	; (8002878 <HAL_RCC_OscConfig+0x824>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d0f0      	beq.n	80027b4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027d2:	e05e      	b.n	8002892 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e05d      	b.n	8002894 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027d8:	4b27      	ldr	r3, [pc, #156]	; (8002878 <HAL_RCC_OscConfig+0x824>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d156      	bne.n	8002892 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80027e4:	4b24      	ldr	r3, [pc, #144]	; (8002878 <HAL_RCC_OscConfig+0x824>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a23      	ldr	r2, [pc, #140]	; (8002878 <HAL_RCC_OscConfig+0x824>)
 80027ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027f0:	4b21      	ldr	r3, [pc, #132]	; (8002878 <HAL_RCC_OscConfig+0x824>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	4a20      	ldr	r2, [pc, #128]	; (8002878 <HAL_RCC_OscConfig+0x824>)
 80027f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027fc:	f7fe fc82 	bl	8001104 <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002804:	f7fe fc7e 	bl	8001104 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e03e      	b.n	8002894 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002816:	4b18      	ldr	r3, [pc, #96]	; (8002878 <HAL_RCC_OscConfig+0x824>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0f0      	beq.n	8002804 <HAL_RCC_OscConfig+0x7b0>
 8002822:	e036      	b.n	8002892 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	2b0c      	cmp	r3, #12
 8002828:	d031      	beq.n	800288e <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800282a:	4b13      	ldr	r3, [pc, #76]	; (8002878 <HAL_RCC_OscConfig+0x824>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a12      	ldr	r2, [pc, #72]	; (8002878 <HAL_RCC_OscConfig+0x824>)
 8002830:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002834:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002836:	4b10      	ldr	r3, [pc, #64]	; (8002878 <HAL_RCC_OscConfig+0x824>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d105      	bne.n	800284e <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002842:	4b0d      	ldr	r3, [pc, #52]	; (8002878 <HAL_RCC_OscConfig+0x824>)
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	4a0c      	ldr	r2, [pc, #48]	; (8002878 <HAL_RCC_OscConfig+0x824>)
 8002848:	f023 0303 	bic.w	r3, r3, #3
 800284c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800284e:	4b0a      	ldr	r3, [pc, #40]	; (8002878 <HAL_RCC_OscConfig+0x824>)
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	4a09      	ldr	r2, [pc, #36]	; (8002878 <HAL_RCC_OscConfig+0x824>)
 8002854:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002858:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800285c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285e:	f7fe fc51 	bl	8001104 <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002864:	e00c      	b.n	8002880 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002866:	f7fe fc4d 	bl	8001104 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d905      	bls.n	8002880 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e00d      	b.n	8002894 <HAL_RCC_OscConfig+0x840>
 8002878:	40021000 	.word	0x40021000
 800287c:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002880:	4b06      	ldr	r3, [pc, #24]	; (800289c <HAL_RCC_OscConfig+0x848>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1ec      	bne.n	8002866 <HAL_RCC_OscConfig+0x812>
 800288c:	e001      	b.n	8002892 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e000      	b.n	8002894 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3720      	adds	r7, #32
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40021000 	.word	0x40021000

080028a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80028aa:	2300      	movs	r3, #0
 80028ac:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d101      	bne.n	80028b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e10f      	b.n	8002ad8 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028b8:	4b89      	ldr	r3, [pc, #548]	; (8002ae0 <HAL_RCC_ClockConfig+0x240>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 030f 	and.w	r3, r3, #15
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d910      	bls.n	80028e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028c6:	4b86      	ldr	r3, [pc, #536]	; (8002ae0 <HAL_RCC_ClockConfig+0x240>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f023 020f 	bic.w	r2, r3, #15
 80028ce:	4984      	ldr	r1, [pc, #528]	; (8002ae0 <HAL_RCC_ClockConfig+0x240>)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d6:	4b82      	ldr	r3, [pc, #520]	; (8002ae0 <HAL_RCC_ClockConfig+0x240>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d001      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e0f7      	b.n	8002ad8 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 8089 	beq.w	8002a08 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b03      	cmp	r3, #3
 80028fc:	d133      	bne.n	8002966 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028fe:	4b79      	ldr	r3, [pc, #484]	; (8002ae4 <HAL_RCC_ClockConfig+0x244>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e0e4      	b.n	8002ad8 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800290e:	f000 fa43 	bl	8002d98 <RCC_GetSysClockFreqFromPLLSource>
 8002912:	4602      	mov	r2, r0
 8002914:	4b74      	ldr	r3, [pc, #464]	; (8002ae8 <HAL_RCC_ClockConfig+0x248>)
 8002916:	429a      	cmp	r2, r3
 8002918:	d955      	bls.n	80029c6 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800291a:	4b72      	ldr	r3, [pc, #456]	; (8002ae4 <HAL_RCC_ClockConfig+0x244>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10a      	bne.n	800293c <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002926:	4b6f      	ldr	r3, [pc, #444]	; (8002ae4 <HAL_RCC_ClockConfig+0x244>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800292e:	4a6d      	ldr	r2, [pc, #436]	; (8002ae4 <HAL_RCC_ClockConfig+0x244>)
 8002930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002934:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002936:	2380      	movs	r3, #128	; 0x80
 8002938:	617b      	str	r3, [r7, #20]
 800293a:	e044      	b.n	80029c6 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d03e      	beq.n	80029c6 <HAL_RCC_ClockConfig+0x126>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d13a      	bne.n	80029c6 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002950:	4b64      	ldr	r3, [pc, #400]	; (8002ae4 <HAL_RCC_ClockConfig+0x244>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002958:	4a62      	ldr	r2, [pc, #392]	; (8002ae4 <HAL_RCC_ClockConfig+0x244>)
 800295a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800295e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002960:	2380      	movs	r3, #128	; 0x80
 8002962:	617b      	str	r3, [r7, #20]
 8002964:	e02f      	b.n	80029c6 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	2b02      	cmp	r3, #2
 800296c:	d107      	bne.n	800297e <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800296e:	4b5d      	ldr	r3, [pc, #372]	; (8002ae4 <HAL_RCC_ClockConfig+0x244>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d115      	bne.n	80029a6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e0ac      	b.n	8002ad8 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d107      	bne.n	8002996 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002986:	4b57      	ldr	r3, [pc, #348]	; (8002ae4 <HAL_RCC_ClockConfig+0x244>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d109      	bne.n	80029a6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e0a0      	b.n	8002ad8 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002996:	4b53      	ldr	r3, [pc, #332]	; (8002ae4 <HAL_RCC_ClockConfig+0x244>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e098      	b.n	8002ad8 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80029a6:	f000 f8db 	bl	8002b60 <HAL_RCC_GetSysClockFreq>
 80029aa:	4602      	mov	r2, r0
 80029ac:	4b4e      	ldr	r3, [pc, #312]	; (8002ae8 <HAL_RCC_ClockConfig+0x248>)
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d909      	bls.n	80029c6 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80029b2:	4b4c      	ldr	r3, [pc, #304]	; (8002ae4 <HAL_RCC_ClockConfig+0x244>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029ba:	4a4a      	ldr	r2, [pc, #296]	; (8002ae4 <HAL_RCC_ClockConfig+0x244>)
 80029bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029c0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80029c2:	2380      	movs	r3, #128	; 0x80
 80029c4:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029c6:	4b47      	ldr	r3, [pc, #284]	; (8002ae4 <HAL_RCC_ClockConfig+0x244>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f023 0203 	bic.w	r2, r3, #3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	4944      	ldr	r1, [pc, #272]	; (8002ae4 <HAL_RCC_ClockConfig+0x244>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029d8:	f7fe fb94 	bl	8001104 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029de:	e00a      	b.n	80029f6 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e0:	f7fe fb90 	bl	8001104 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e070      	b.n	8002ad8 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f6:	4b3b      	ldr	r3, [pc, #236]	; (8002ae4 <HAL_RCC_ClockConfig+0x244>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 020c 	and.w	r2, r3, #12
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d1eb      	bne.n	80029e0 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d009      	beq.n	8002a28 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a14:	4b33      	ldr	r3, [pc, #204]	; (8002ae4 <HAL_RCC_ClockConfig+0x244>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	4930      	ldr	r1, [pc, #192]	; (8002ae4 <HAL_RCC_ClockConfig+0x244>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	608b      	str	r3, [r1, #8]
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	2b80      	cmp	r3, #128	; 0x80
 8002a2c:	d105      	bne.n	8002a3a <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002a2e:	4b2d      	ldr	r3, [pc, #180]	; (8002ae4 <HAL_RCC_ClockConfig+0x244>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	4a2c      	ldr	r2, [pc, #176]	; (8002ae4 <HAL_RCC_ClockConfig+0x244>)
 8002a34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a38:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a3a:	4b29      	ldr	r3, [pc, #164]	; (8002ae0 <HAL_RCC_ClockConfig+0x240>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 030f 	and.w	r3, r3, #15
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d210      	bcs.n	8002a6a <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a48:	4b25      	ldr	r3, [pc, #148]	; (8002ae0 <HAL_RCC_ClockConfig+0x240>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f023 020f 	bic.w	r2, r3, #15
 8002a50:	4923      	ldr	r1, [pc, #140]	; (8002ae0 <HAL_RCC_ClockConfig+0x240>)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a58:	4b21      	ldr	r3, [pc, #132]	; (8002ae0 <HAL_RCC_ClockConfig+0x240>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 030f 	and.w	r3, r3, #15
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d001      	beq.n	8002a6a <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e036      	b.n	8002ad8 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0304 	and.w	r3, r3, #4
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d008      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a76:	4b1b      	ldr	r3, [pc, #108]	; (8002ae4 <HAL_RCC_ClockConfig+0x244>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	4918      	ldr	r1, [pc, #96]	; (8002ae4 <HAL_RCC_ClockConfig+0x244>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0308 	and.w	r3, r3, #8
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d009      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a94:	4b13      	ldr	r3, [pc, #76]	; (8002ae4 <HAL_RCC_ClockConfig+0x244>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	4910      	ldr	r1, [pc, #64]	; (8002ae4 <HAL_RCC_ClockConfig+0x244>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002aa8:	f000 f85a 	bl	8002b60 <HAL_RCC_GetSysClockFreq>
 8002aac:	4601      	mov	r1, r0
 8002aae:	4b0d      	ldr	r3, [pc, #52]	; (8002ae4 <HAL_RCC_ClockConfig+0x244>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	091b      	lsrs	r3, r3, #4
 8002ab4:	f003 030f 	and.w	r3, r3, #15
 8002ab8:	4a0c      	ldr	r2, [pc, #48]	; (8002aec <HAL_RCC_ClockConfig+0x24c>)
 8002aba:	5cd3      	ldrb	r3, [r2, r3]
 8002abc:	f003 031f 	and.w	r3, r3, #31
 8002ac0:	fa21 f303 	lsr.w	r3, r1, r3
 8002ac4:	4a0a      	ldr	r2, [pc, #40]	; (8002af0 <HAL_RCC_ClockConfig+0x250>)
 8002ac6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ac8:	4b0a      	ldr	r3, [pc, #40]	; (8002af4 <HAL_RCC_ClockConfig+0x254>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7fe fac9 	bl	8001064 <HAL_InitTick>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	73fb      	strb	r3, [r7, #15]

  return status;
 8002ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3718      	adds	r7, #24
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40022000 	.word	0x40022000
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	04c4b400 	.word	0x04c4b400
 8002aec:	080054ec 	.word	0x080054ec
 8002af0:	20000000 	.word	0x20000000
 8002af4:	20000004 	.word	0x20000004

08002af8 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b08a      	sub	sp, #40	; 0x28
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 8002b04:	4b15      	ldr	r3, [pc, #84]	; (8002b5c <HAL_RCC_MCOConfig+0x64>)
 8002b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b08:	4a14      	ldr	r2, [pc, #80]	; (8002b5c <HAL_RCC_MCOConfig+0x64>)
 8002b0a:	f043 0301 	orr.w	r3, r3, #1
 8002b0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b10:	4b12      	ldr	r3, [pc, #72]	; (8002b5c <HAL_RCC_MCOConfig+0x64>)
 8002b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	613b      	str	r3, [r7, #16]
 8002b1a:	693b      	ldr	r3, [r7, #16]

  /* Configue the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8002b1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b22:	2302      	movs	r3, #2
 8002b24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b26:	2302      	movs	r3, #2
 8002b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8002b32:	f107 0314 	add.w	r3, r7, #20
 8002b36:	4619      	mov	r1, r3
 8002b38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b3c:	f7fe ff00 	bl	8001940 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8002b40:	4b06      	ldr	r3, [pc, #24]	; (8002b5c <HAL_RCC_MCOConfig+0x64>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b48:	68b9      	ldr	r1, [r7, #8]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	430b      	orrs	r3, r1
 8002b4e:	4903      	ldr	r1, [pc, #12]	; (8002b5c <HAL_RCC_MCOConfig+0x64>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	608b      	str	r3, [r1, #8]
}
 8002b54:	bf00      	nop
 8002b56:	3728      	adds	r7, #40	; 0x28
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40021000 	.word	0x40021000

08002b60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b089      	sub	sp, #36	; 0x24
 8002b64:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	61fb      	str	r3, [r7, #28]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b6e:	4b3d      	ldr	r3, [pc, #244]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 030c 	and.w	r3, r3, #12
 8002b76:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b78:	4b3a      	ldr	r3, [pc, #232]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f003 0303 	and.w	r3, r3, #3
 8002b80:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d005      	beq.n	8002b94 <HAL_RCC_GetSysClockFreq+0x34>
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	2b0c      	cmp	r3, #12
 8002b8c:	d121      	bne.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d11e      	bne.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b94:	4b33      	ldr	r3, [pc, #204]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0308 	and.w	r3, r3, #8
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d107      	bne.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ba0:	4b30      	ldr	r3, [pc, #192]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ba6:	0a1b      	lsrs	r3, r3, #8
 8002ba8:	f003 030f 	and.w	r3, r3, #15
 8002bac:	61fb      	str	r3, [r7, #28]
 8002bae:	e005      	b.n	8002bbc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002bb0:	4b2c      	ldr	r3, [pc, #176]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x104>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	091b      	lsrs	r3, r3, #4
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002bbc:	4a2a      	ldr	r2, [pc, #168]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10d      	bne.n	8002be8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bd0:	e00a      	b.n	8002be8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d102      	bne.n	8002bde <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002bd8:	4b24      	ldr	r3, [pc, #144]	; (8002c6c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002bda:	61bb      	str	r3, [r7, #24]
 8002bdc:	e004      	b.n	8002be8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d101      	bne.n	8002be8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002be4:	4b22      	ldr	r3, [pc, #136]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x110>)
 8002be6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	2b0c      	cmp	r3, #12
 8002bec:	d133      	bne.n	8002c56 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002bee:	4b1d      	ldr	r3, [pc, #116]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x104>)
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	f003 0303 	and.w	r3, r3, #3
 8002bf6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d002      	beq.n	8002c04 <HAL_RCC_GetSysClockFreq+0xa4>
 8002bfe:	2b03      	cmp	r3, #3
 8002c00:	d003      	beq.n	8002c0a <HAL_RCC_GetSysClockFreq+0xaa>
 8002c02:	e005      	b.n	8002c10 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c04:	4b19      	ldr	r3, [pc, #100]	; (8002c6c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c06:	617b      	str	r3, [r7, #20]
      break;
 8002c08:	e005      	b.n	8002c16 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c0a:	4b19      	ldr	r3, [pc, #100]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c0c:	617b      	str	r3, [r7, #20]
      break;
 8002c0e:	e002      	b.n	8002c16 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	617b      	str	r3, [r7, #20]
      break;
 8002c14:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c16:	4b13      	ldr	r3, [pc, #76]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	091b      	lsrs	r3, r3, #4
 8002c1c:	f003 030f 	and.w	r3, r3, #15
 8002c20:	3301      	adds	r3, #1
 8002c22:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c24:	4b0f      	ldr	r3, [pc, #60]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	0a1b      	lsrs	r3, r3, #8
 8002c2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	fb02 f203 	mul.w	r2, r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c3a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c3c:	4b09      	ldr	r3, [pc, #36]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	0e5b      	lsrs	r3, r3, #25
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	3301      	adds	r3, #1
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c54:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c56:	69bb      	ldr	r3, [r7, #24]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3724      	adds	r7, #36	; 0x24
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	40021000 	.word	0x40021000
 8002c68:	08005504 	.word	0x08005504
 8002c6c:	00f42400 	.word	0x00f42400
 8002c70:	007a1200 	.word	0x007a1200

08002c74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c78:	4b03      	ldr	r3, [pc, #12]	; (8002c88 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	20000000 	.word	0x20000000

08002c8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002c90:	f7ff fff0 	bl	8002c74 <HAL_RCC_GetHCLKFreq>
 8002c94:	4601      	mov	r1, r0
 8002c96:	4b06      	ldr	r3, [pc, #24]	; (8002cb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	0a1b      	lsrs	r3, r3, #8
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	4a04      	ldr	r2, [pc, #16]	; (8002cb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ca2:	5cd3      	ldrb	r3, [r2, r3]
 8002ca4:	f003 031f 	and.w	r3, r3, #31
 8002ca8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	080054fc 	.word	0x080054fc

08002cb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002cbc:	f7ff ffda 	bl	8002c74 <HAL_RCC_GetHCLKFreq>
 8002cc0:	4601      	mov	r1, r0
 8002cc2:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	0adb      	lsrs	r3, r3, #11
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	4a04      	ldr	r2, [pc, #16]	; (8002ce0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002cce:	5cd3      	ldrb	r3, [r2, r3]
 8002cd0:	f003 031f 	and.w	r3, r3, #31
 8002cd4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	080054fc 	.word	0x080054fc

08002ce4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002cec:	2300      	movs	r3, #0
 8002cee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002cf0:	4b27      	ldr	r3, [pc, #156]	; (8002d90 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d003      	beq.n	8002d04 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002cfc:	f7ff f8d6 	bl	8001eac <HAL_PWREx_GetVoltageRange>
 8002d00:	6178      	str	r0, [r7, #20]
 8002d02:	e014      	b.n	8002d2e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d04:	4b22      	ldr	r3, [pc, #136]	; (8002d90 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d08:	4a21      	ldr	r2, [pc, #132]	; (8002d90 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d0e:	6593      	str	r3, [r2, #88]	; 0x58
 8002d10:	4b1f      	ldr	r3, [pc, #124]	; (8002d90 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d1c:	f7ff f8c6 	bl	8001eac <HAL_PWREx_GetVoltageRange>
 8002d20:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d22:	4b1b      	ldr	r3, [pc, #108]	; (8002d90 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d26:	4a1a      	ldr	r2, [pc, #104]	; (8002d90 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d2c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d34:	d10b      	bne.n	8002d4e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b80      	cmp	r3, #128	; 0x80
 8002d3a:	d913      	bls.n	8002d64 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2ba0      	cmp	r3, #160	; 0xa0
 8002d40:	d902      	bls.n	8002d48 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d42:	2302      	movs	r3, #2
 8002d44:	613b      	str	r3, [r7, #16]
 8002d46:	e00d      	b.n	8002d64 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d48:	2301      	movs	r3, #1
 8002d4a:	613b      	str	r3, [r7, #16]
 8002d4c:	e00a      	b.n	8002d64 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b7f      	cmp	r3, #127	; 0x7f
 8002d52:	d902      	bls.n	8002d5a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002d54:	2302      	movs	r3, #2
 8002d56:	613b      	str	r3, [r7, #16]
 8002d58:	e004      	b.n	8002d64 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b70      	cmp	r3, #112	; 0x70
 8002d5e:	d101      	bne.n	8002d64 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d60:	2301      	movs	r3, #1
 8002d62:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d64:	4b0b      	ldr	r3, [pc, #44]	; (8002d94 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f023 020f 	bic.w	r2, r3, #15
 8002d6c:	4909      	ldr	r1, [pc, #36]	; (8002d94 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d74:	4b07      	ldr	r3, [pc, #28]	; (8002d94 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 030f 	and.w	r3, r3, #15
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d001      	beq.n	8002d86 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e000      	b.n	8002d88 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3718      	adds	r7, #24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40021000 	.word	0x40021000
 8002d94:	40022000 	.word	0x40022000

08002d98 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b087      	sub	sp, #28
 8002d9c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8002da2:	4b2d      	ldr	r3, [pc, #180]	; (8002e58 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	f003 0303 	and.w	r3, r3, #3
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d118      	bne.n	8002de0 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002dae:	4b2a      	ldr	r3, [pc, #168]	; (8002e58 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0308 	and.w	r3, r3, #8
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d107      	bne.n	8002dca <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002dba:	4b27      	ldr	r3, [pc, #156]	; (8002e58 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002dbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dc0:	0a1b      	lsrs	r3, r3, #8
 8002dc2:	f003 030f 	and.w	r3, r3, #15
 8002dc6:	617b      	str	r3, [r7, #20]
 8002dc8:	e005      	b.n	8002dd6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002dca:	4b23      	ldr	r3, [pc, #140]	; (8002e58 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	091b      	lsrs	r3, r3, #4
 8002dd0:	f003 030f 	and.w	r3, r3, #15
 8002dd4:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002dd6:	4a21      	ldr	r2, [pc, #132]	; (8002e5c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dde:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002de0:	4b1d      	ldr	r3, [pc, #116]	; (8002e58 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	f003 0303 	and.w	r3, r3, #3
 8002de8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d002      	beq.n	8002df6 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8002df0:	2b03      	cmp	r3, #3
 8002df2:	d003      	beq.n	8002dfc <RCC_GetSysClockFreqFromPLLSource+0x64>
 8002df4:	e005      	b.n	8002e02 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002df6:	4b1a      	ldr	r3, [pc, #104]	; (8002e60 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002df8:	613b      	str	r3, [r7, #16]
    break;
 8002dfa:	e005      	b.n	8002e08 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002dfc:	4b19      	ldr	r3, [pc, #100]	; (8002e64 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002dfe:	613b      	str	r3, [r7, #16]
    break;
 8002e00:	e002      	b.n	8002e08 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	613b      	str	r3, [r7, #16]
    break;
 8002e06:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e08:	4b13      	ldr	r3, [pc, #76]	; (8002e58 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	091b      	lsrs	r3, r3, #4
 8002e0e:	f003 030f 	and.w	r3, r3, #15
 8002e12:	3301      	adds	r3, #1
 8002e14:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e16:	4b10      	ldr	r3, [pc, #64]	; (8002e58 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	0a1b      	lsrs	r3, r3, #8
 8002e1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	fb02 f203 	mul.w	r2, r2, r3
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e2c:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e2e:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	0e5b      	lsrs	r3, r3, #25
 8002e34:	f003 0303 	and.w	r3, r3, #3
 8002e38:	3301      	adds	r3, #1
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e46:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002e48:	683b      	ldr	r3, [r7, #0]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	371c      	adds	r7, #28
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	08005504 	.word	0x08005504
 8002e60:	00f42400 	.word	0x00f42400
 8002e64:	007a1200 	.word	0x007a1200

08002e68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e70:	2300      	movs	r3, #0
 8002e72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e74:	2300      	movs	r3, #0
 8002e76:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d03d      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e88:	2b40      	cmp	r3, #64	; 0x40
 8002e8a:	d00b      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8002e8c:	2b40      	cmp	r3, #64	; 0x40
 8002e8e:	d804      	bhi.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00e      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8002e94:	2b20      	cmp	r3, #32
 8002e96:	d015      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002e98:	e01d      	b.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002e9a:	2b60      	cmp	r3, #96	; 0x60
 8002e9c:	d01e      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002e9e:	2b80      	cmp	r3, #128	; 0x80
 8002ea0:	d01c      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002ea2:	e018      	b.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ea4:	4b86      	ldr	r3, [pc, #536]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	4a85      	ldr	r2, [pc, #532]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002eaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002eb0:	e015      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f000 fafd 	bl	80034b8 <RCCEx_PLLSAI1_Config>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ec2:	e00c      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3320      	adds	r3, #32
 8002ec8:	2100      	movs	r1, #0
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 fbe4 	bl	8003698 <RCCEx_PLLSAI2_Config>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ed4:	e003      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	74fb      	strb	r3, [r7, #19]
      break;
 8002eda:	e000      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8002edc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ede:	7cfb      	ldrb	r3, [r7, #19]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10b      	bne.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ee4:	4b76      	ldr	r3, [pc, #472]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ee6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002eea:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ef2:	4973      	ldr	r1, [pc, #460]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002efa:	e001      	b.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002efc:	7cfb      	ldrb	r3, [r7, #19]
 8002efe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d042      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f14:	d00f      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8002f16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f1a:	d805      	bhi.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d011      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8002f20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f24:	d017      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8002f26:	e01f      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8002f28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f2c:	d01f      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f32:	d01c      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f34:	e018      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f36:	4b62      	ldr	r3, [pc, #392]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	4a61      	ldr	r2, [pc, #388]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f40:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f42:	e015      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	3304      	adds	r3, #4
 8002f48:	2100      	movs	r1, #0
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f000 fab4 	bl	80034b8 <RCCEx_PLLSAI1_Config>
 8002f50:	4603      	mov	r3, r0
 8002f52:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f54:	e00c      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	3320      	adds	r3, #32
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f000 fb9b 	bl	8003698 <RCCEx_PLLSAI2_Config>
 8002f62:	4603      	mov	r3, r0
 8002f64:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f66:	e003      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	74fb      	strb	r3, [r7, #19]
      break;
 8002f6c:	e000      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8002f6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f70:	7cfb      	ldrb	r3, [r7, #19]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10b      	bne.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f76:	4b52      	ldr	r3, [pc, #328]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f84:	494e      	ldr	r1, [pc, #312]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002f8c:	e001      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f8e:	7cfb      	ldrb	r3, [r7, #19]
 8002f90:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f000 809f 	beq.w	80030de <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fa4:	4b46      	ldr	r3, [pc, #280]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d101      	bne.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e000      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00d      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fba:	4b41      	ldr	r3, [pc, #260]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fbe:	4a40      	ldr	r2, [pc, #256]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fc4:	6593      	str	r3, [r2, #88]	; 0x58
 8002fc6:	4b3e      	ldr	r3, [pc, #248]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fce:	60bb      	str	r3, [r7, #8]
 8002fd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fd6:	4b3b      	ldr	r3, [pc, #236]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a3a      	ldr	r2, [pc, #232]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fe2:	f7fe f88f 	bl	8001104 <HAL_GetTick>
 8002fe6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fe8:	e009      	b.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fea:	f7fe f88b 	bl	8001104 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d902      	bls.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	74fb      	strb	r3, [r7, #19]
        break;
 8002ffc:	e005      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ffe:	4b31      	ldr	r3, [pc, #196]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003006:	2b00      	cmp	r3, #0
 8003008:	d0ef      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 800300a:	7cfb      	ldrb	r3, [r7, #19]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d15b      	bne.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003010:	4b2b      	ldr	r3, [pc, #172]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800301a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d01f      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	429a      	cmp	r2, r3
 800302c:	d019      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800302e:	4b24      	ldr	r3, [pc, #144]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003038:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800303a:	4b21      	ldr	r3, [pc, #132]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800303c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003040:	4a1f      	ldr	r2, [pc, #124]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003042:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003046:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800304a:	4b1d      	ldr	r3, [pc, #116]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800304c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003050:	4a1b      	ldr	r2, [pc, #108]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003056:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800305a:	4a19      	ldr	r2, [pc, #100]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b00      	cmp	r3, #0
 800306a:	d016      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306c:	f7fe f84a 	bl	8001104 <HAL_GetTick>
 8003070:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003072:	e00b      	b.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003074:	f7fe f846 	bl	8001104 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003082:	4293      	cmp	r3, r2
 8003084:	d902      	bls.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	74fb      	strb	r3, [r7, #19]
            break;
 800308a:	e006      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800308c:	4b0c      	ldr	r3, [pc, #48]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800308e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0ec      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 800309a:	7cfb      	ldrb	r3, [r7, #19]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d10c      	bne.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030a0:	4b07      	ldr	r3, [pc, #28]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b0:	4903      	ldr	r1, [pc, #12]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80030b8:	e008      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030ba:	7cfb      	ldrb	r3, [r7, #19]
 80030bc:	74bb      	strb	r3, [r7, #18]
 80030be:	e005      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x264>
 80030c0:	40021000 	.word	0x40021000
 80030c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030c8:	7cfb      	ldrb	r3, [r7, #19]
 80030ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030cc:	7c7b      	ldrb	r3, [r7, #17]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d105      	bne.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030d2:	4ba0      	ldr	r3, [pc, #640]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d6:	4a9f      	ldr	r2, [pc, #636]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00a      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030ea:	4b9a      	ldr	r3, [pc, #616]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f0:	f023 0203 	bic.w	r2, r3, #3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030f8:	4996      	ldr	r1, [pc, #600]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00a      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800310c:	4b91      	ldr	r3, [pc, #580]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800310e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003112:	f023 020c 	bic.w	r2, r3, #12
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	498e      	ldr	r1, [pc, #568]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800311c:	4313      	orrs	r3, r2
 800311e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0304 	and.w	r3, r3, #4
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00a      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800312e:	4b89      	ldr	r3, [pc, #548]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003134:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313c:	4985      	ldr	r1, [pc, #532]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800313e:	4313      	orrs	r3, r2
 8003140:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0308 	and.w	r3, r3, #8
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00a      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003150:	4b80      	ldr	r3, [pc, #512]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003156:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800315e:	497d      	ldr	r1, [pc, #500]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003160:	4313      	orrs	r3, r2
 8003162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0310 	and.w	r3, r3, #16
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00a      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003172:	4b78      	ldr	r3, [pc, #480]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003178:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003180:	4974      	ldr	r1, [pc, #464]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003182:	4313      	orrs	r3, r2
 8003184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0320 	and.w	r3, r3, #32
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00a      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003194:	4b6f      	ldr	r3, [pc, #444]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031a2:	496c      	ldr	r1, [pc, #432]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00a      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031b6:	4b67      	ldr	r3, [pc, #412]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031c4:	4963      	ldr	r1, [pc, #396]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00a      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031d8:	4b5e      	ldr	r3, [pc, #376]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031e6:	495b      	ldr	r1, [pc, #364]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00a      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031fa:	4b56      	ldr	r3, [pc, #344]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003200:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003208:	4952      	ldr	r1, [pc, #328]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800320a:	4313      	orrs	r3, r2
 800320c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00a      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800321c:	4b4d      	ldr	r3, [pc, #308]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800321e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003222:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322a:	494a      	ldr	r1, [pc, #296]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800322c:	4313      	orrs	r3, r2
 800322e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00a      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800323e:	4b45      	ldr	r3, [pc, #276]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003244:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324c:	4941      	ldr	r1, [pc, #260]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800324e:	4313      	orrs	r3, r2
 8003250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00a      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003260:	4b3c      	ldr	r3, [pc, #240]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003262:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003266:	f023 0203 	bic.w	r2, r3, #3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800326e:	4939      	ldr	r1, [pc, #228]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003270:	4313      	orrs	r3, r2
 8003272:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d028      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003282:	4b34      	ldr	r3, [pc, #208]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003288:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003290:	4930      	ldr	r1, [pc, #192]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003292:	4313      	orrs	r3, r2
 8003294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800329c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032a0:	d106      	bne.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032a2:	4b2c      	ldr	r3, [pc, #176]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	4a2b      	ldr	r2, [pc, #172]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032ac:	60d3      	str	r3, [r2, #12]
 80032ae:	e011      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032b8:	d10c      	bne.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	3304      	adds	r3, #4
 80032be:	2101      	movs	r1, #1
 80032c0:	4618      	mov	r0, r3
 80032c2:	f000 f8f9 	bl	80034b8 <RCCEx_PLLSAI1_Config>
 80032c6:	4603      	mov	r3, r0
 80032c8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80032ca:	7cfb      	ldrb	r3, [r7, #19]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 80032d0:	7cfb      	ldrb	r3, [r7, #19]
 80032d2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d04d      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032e8:	d108      	bne.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x494>
 80032ea:	4b1a      	ldr	r3, [pc, #104]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032f0:	4a18      	ldr	r2, [pc, #96]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032f6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80032fa:	e012      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80032fc:	4b15      	ldr	r3, [pc, #84]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003302:	4a14      	ldr	r2, [pc, #80]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003304:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003308:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800330c:	4b11      	ldr	r3, [pc, #68]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800330e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003312:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800331a:	490e      	ldr	r1, [pc, #56]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800331c:	4313      	orrs	r3, r2
 800331e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003326:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800332a:	d106      	bne.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800332c:	4b09      	ldr	r3, [pc, #36]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	4a08      	ldr	r2, [pc, #32]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003332:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003336:	60d3      	str	r3, [r2, #12]
 8003338:	e020      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800333e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003342:	d109      	bne.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003344:	4b03      	ldr	r3, [pc, #12]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	4a02      	ldr	r2, [pc, #8]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800334a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800334e:	60d3      	str	r3, [r2, #12]
 8003350:	e014      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003352:	bf00      	nop
 8003354:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800335c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003360:	d10c      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3304      	adds	r3, #4
 8003366:	2101      	movs	r1, #1
 8003368:	4618      	mov	r0, r3
 800336a:	f000 f8a5 	bl	80034b8 <RCCEx_PLLSAI1_Config>
 800336e:	4603      	mov	r3, r0
 8003370:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003372:	7cfb      	ldrb	r3, [r7, #19]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003378:	7cfb      	ldrb	r3, [r7, #19]
 800337a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d028      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003388:	4b4a      	ldr	r3, [pc, #296]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800338a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003396:	4947      	ldr	r1, [pc, #284]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003398:	4313      	orrs	r3, r2
 800339a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033a6:	d106      	bne.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033a8:	4b42      	ldr	r3, [pc, #264]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	4a41      	ldr	r2, [pc, #260]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80033ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033b2:	60d3      	str	r3, [r2, #12]
 80033b4:	e011      	b.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033be:	d10c      	bne.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3304      	adds	r3, #4
 80033c4:	2101      	movs	r1, #1
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 f876 	bl	80034b8 <RCCEx_PLLSAI1_Config>
 80033cc:	4603      	mov	r3, r0
 80033ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033d0:	7cfb      	ldrb	r3, [r7, #19]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 80033d6:	7cfb      	ldrb	r3, [r7, #19]
 80033d8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d01e      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033e6:	4b33      	ldr	r3, [pc, #204]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80033e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033f6:	492f      	ldr	r1, [pc, #188]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003404:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003408:	d10c      	bne.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	3304      	adds	r3, #4
 800340e:	2102      	movs	r1, #2
 8003410:	4618      	mov	r0, r3
 8003412:	f000 f851 	bl	80034b8 <RCCEx_PLLSAI1_Config>
 8003416:	4603      	mov	r3, r0
 8003418:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800341a:	7cfb      	ldrb	r3, [r7, #19]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8003420:	7cfb      	ldrb	r3, [r7, #19]
 8003422:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00b      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003430:	4b20      	ldr	r3, [pc, #128]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003432:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003436:	f023 0204 	bic.w	r2, r3, #4
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003440:	491c      	ldr	r1, [pc, #112]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003442:	4313      	orrs	r3, r2
 8003444:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00b      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003454:	4b17      	ldr	r3, [pc, #92]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003456:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800345a:	f023 0218 	bic.w	r2, r3, #24
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003464:	4913      	ldr	r1, [pc, #76]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003466:	4313      	orrs	r3, r2
 8003468:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d017      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003478:	4b0e      	ldr	r3, [pc, #56]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800347a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800347e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003488:	490a      	ldr	r1, [pc, #40]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800348a:	4313      	orrs	r3, r2
 800348c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003496:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800349a:	d105      	bne.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800349c:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	4a04      	ldr	r2, [pc, #16]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80034a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034a6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80034a8:	7cbb      	ldrb	r3, [r7, #18]
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3718      	adds	r7, #24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	40021000 	.word	0x40021000

080034b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034c2:	2300      	movs	r3, #0
 80034c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034c6:	4b70      	ldr	r3, [pc, #448]	; (8003688 <RCCEx_PLLSAI1_Config+0x1d0>)
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	f003 0303 	and.w	r3, r3, #3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00e      	beq.n	80034f0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80034d2:	4b6d      	ldr	r3, [pc, #436]	; (8003688 <RCCEx_PLLSAI1_Config+0x1d0>)
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	f003 0203 	and.w	r2, r3, #3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d103      	bne.n	80034ea <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
       ||
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d13f      	bne.n	800356a <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	73fb      	strb	r3, [r7, #15]
 80034ee:	e03c      	b.n	800356a <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d00c      	beq.n	8003512 <RCCEx_PLLSAI1_Config+0x5a>
 80034f8:	2b03      	cmp	r3, #3
 80034fa:	d013      	beq.n	8003524 <RCCEx_PLLSAI1_Config+0x6c>
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d120      	bne.n	8003542 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003500:	4b61      	ldr	r3, [pc, #388]	; (8003688 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d11d      	bne.n	8003548 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003510:	e01a      	b.n	8003548 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003512:	4b5d      	ldr	r3, [pc, #372]	; (8003688 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800351a:	2b00      	cmp	r3, #0
 800351c:	d116      	bne.n	800354c <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003522:	e013      	b.n	800354c <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003524:	4b58      	ldr	r3, [pc, #352]	; (8003688 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d10f      	bne.n	8003550 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003530:	4b55      	ldr	r3, [pc, #340]	; (8003688 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d109      	bne.n	8003550 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003540:	e006      	b.n	8003550 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	73fb      	strb	r3, [r7, #15]
      break;
 8003546:	e004      	b.n	8003552 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003548:	bf00      	nop
 800354a:	e002      	b.n	8003552 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 800354c:	bf00      	nop
 800354e:	e000      	b.n	8003552 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003550:	bf00      	nop
    }

    if(status == HAL_OK)
 8003552:	7bfb      	ldrb	r3, [r7, #15]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d108      	bne.n	800356a <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003558:	4b4b      	ldr	r3, [pc, #300]	; (8003688 <RCCEx_PLLSAI1_Config+0x1d0>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f023 0203 	bic.w	r2, r3, #3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4948      	ldr	r1, [pc, #288]	; (8003688 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003566:	4313      	orrs	r3, r2
 8003568:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800356a:	7bfb      	ldrb	r3, [r7, #15]
 800356c:	2b00      	cmp	r3, #0
 800356e:	f040 8086 	bne.w	800367e <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003572:	4b45      	ldr	r3, [pc, #276]	; (8003688 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a44      	ldr	r2, [pc, #272]	; (8003688 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003578:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800357c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800357e:	f7fd fdc1 	bl	8001104 <HAL_GetTick>
 8003582:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003584:	e009      	b.n	800359a <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003586:	f7fd fdbd 	bl	8001104 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d902      	bls.n	800359a <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	73fb      	strb	r3, [r7, #15]
        break;
 8003598:	e005      	b.n	80035a6 <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800359a:	4b3b      	ldr	r3, [pc, #236]	; (8003688 <RCCEx_PLLSAI1_Config+0x1d0>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1ef      	bne.n	8003586 <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80035a6:	7bfb      	ldrb	r3, [r7, #15]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d168      	bne.n	800367e <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d113      	bne.n	80035da <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035b2:	4b35      	ldr	r3, [pc, #212]	; (8003688 <RCCEx_PLLSAI1_Config+0x1d0>)
 80035b4:	691a      	ldr	r2, [r3, #16]
 80035b6:	4b35      	ldr	r3, [pc, #212]	; (800368c <RCCEx_PLLSAI1_Config+0x1d4>)
 80035b8:	4013      	ands	r3, r2
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6892      	ldr	r2, [r2, #8]
 80035be:	0211      	lsls	r1, r2, #8
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	68d2      	ldr	r2, [r2, #12]
 80035c4:	06d2      	lsls	r2, r2, #27
 80035c6:	4311      	orrs	r1, r2
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	6852      	ldr	r2, [r2, #4]
 80035cc:	3a01      	subs	r2, #1
 80035ce:	0112      	lsls	r2, r2, #4
 80035d0:	430a      	orrs	r2, r1
 80035d2:	492d      	ldr	r1, [pc, #180]	; (8003688 <RCCEx_PLLSAI1_Config+0x1d0>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	610b      	str	r3, [r1, #16]
 80035d8:	e02d      	b.n	8003636 <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d115      	bne.n	800360c <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035e0:	4b29      	ldr	r3, [pc, #164]	; (8003688 <RCCEx_PLLSAI1_Config+0x1d0>)
 80035e2:	691a      	ldr	r2, [r3, #16]
 80035e4:	4b2a      	ldr	r3, [pc, #168]	; (8003690 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035e6:	4013      	ands	r3, r2
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	6892      	ldr	r2, [r2, #8]
 80035ec:	0211      	lsls	r1, r2, #8
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	6912      	ldr	r2, [r2, #16]
 80035f2:	0852      	lsrs	r2, r2, #1
 80035f4:	3a01      	subs	r2, #1
 80035f6:	0552      	lsls	r2, r2, #21
 80035f8:	4311      	orrs	r1, r2
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	6852      	ldr	r2, [r2, #4]
 80035fe:	3a01      	subs	r2, #1
 8003600:	0112      	lsls	r2, r2, #4
 8003602:	430a      	orrs	r2, r1
 8003604:	4920      	ldr	r1, [pc, #128]	; (8003688 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003606:	4313      	orrs	r3, r2
 8003608:	610b      	str	r3, [r1, #16]
 800360a:	e014      	b.n	8003636 <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800360c:	4b1e      	ldr	r3, [pc, #120]	; (8003688 <RCCEx_PLLSAI1_Config+0x1d0>)
 800360e:	691a      	ldr	r2, [r3, #16]
 8003610:	4b20      	ldr	r3, [pc, #128]	; (8003694 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003612:	4013      	ands	r3, r2
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	6892      	ldr	r2, [r2, #8]
 8003618:	0211      	lsls	r1, r2, #8
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6952      	ldr	r2, [r2, #20]
 800361e:	0852      	lsrs	r2, r2, #1
 8003620:	3a01      	subs	r2, #1
 8003622:	0652      	lsls	r2, r2, #25
 8003624:	4311      	orrs	r1, r2
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	6852      	ldr	r2, [r2, #4]
 800362a:	3a01      	subs	r2, #1
 800362c:	0112      	lsls	r2, r2, #4
 800362e:	430a      	orrs	r2, r1
 8003630:	4915      	ldr	r1, [pc, #84]	; (8003688 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003632:	4313      	orrs	r3, r2
 8003634:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003636:	4b14      	ldr	r3, [pc, #80]	; (8003688 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a13      	ldr	r2, [pc, #76]	; (8003688 <RCCEx_PLLSAI1_Config+0x1d0>)
 800363c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003640:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003642:	f7fd fd5f 	bl	8001104 <HAL_GetTick>
 8003646:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003648:	e009      	b.n	800365e <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800364a:	f7fd fd5b 	bl	8001104 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d902      	bls.n	800365e <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	73fb      	strb	r3, [r7, #15]
          break;
 800365c:	e005      	b.n	800366a <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800365e:	4b0a      	ldr	r3, [pc, #40]	; (8003688 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d0ef      	beq.n	800364a <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 800366a:	7bfb      	ldrb	r3, [r7, #15]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d106      	bne.n	800367e <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003670:	4b05      	ldr	r3, [pc, #20]	; (8003688 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003672:	691a      	ldr	r2, [r3, #16]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	4903      	ldr	r1, [pc, #12]	; (8003688 <RCCEx_PLLSAI1_Config+0x1d0>)
 800367a:	4313      	orrs	r3, r2
 800367c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800367e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003680:	4618      	mov	r0, r3
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40021000 	.word	0x40021000
 800368c:	07ff800f 	.word	0x07ff800f
 8003690:	ff9f800f 	.word	0xff9f800f
 8003694:	f9ff800f 	.word	0xf9ff800f

08003698 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036a2:	2300      	movs	r3, #0
 80036a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036a6:	4b70      	ldr	r3, [pc, #448]	; (8003868 <RCCEx_PLLSAI2_Config+0x1d0>)
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	f003 0303 	and.w	r3, r3, #3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00e      	beq.n	80036d0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80036b2:	4b6d      	ldr	r3, [pc, #436]	; (8003868 <RCCEx_PLLSAI2_Config+0x1d0>)
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	f003 0203 	and.w	r2, r3, #3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d103      	bne.n	80036ca <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
       ||
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d13f      	bne.n	800374a <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	73fb      	strb	r3, [r7, #15]
 80036ce:	e03c      	b.n	800374a <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d00c      	beq.n	80036f2 <RCCEx_PLLSAI2_Config+0x5a>
 80036d8:	2b03      	cmp	r3, #3
 80036da:	d013      	beq.n	8003704 <RCCEx_PLLSAI2_Config+0x6c>
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d120      	bne.n	8003722 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036e0:	4b61      	ldr	r3, [pc, #388]	; (8003868 <RCCEx_PLLSAI2_Config+0x1d0>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d11d      	bne.n	8003728 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036f0:	e01a      	b.n	8003728 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036f2:	4b5d      	ldr	r3, [pc, #372]	; (8003868 <RCCEx_PLLSAI2_Config+0x1d0>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d116      	bne.n	800372c <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003702:	e013      	b.n	800372c <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003704:	4b58      	ldr	r3, [pc, #352]	; (8003868 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10f      	bne.n	8003730 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003710:	4b55      	ldr	r3, [pc, #340]	; (8003868 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d109      	bne.n	8003730 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003720:	e006      	b.n	8003730 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	73fb      	strb	r3, [r7, #15]
      break;
 8003726:	e004      	b.n	8003732 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003728:	bf00      	nop
 800372a:	e002      	b.n	8003732 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 800372c:	bf00      	nop
 800372e:	e000      	b.n	8003732 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003730:	bf00      	nop
    }

    if(status == HAL_OK)
 8003732:	7bfb      	ldrb	r3, [r7, #15]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d108      	bne.n	800374a <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003738:	4b4b      	ldr	r3, [pc, #300]	; (8003868 <RCCEx_PLLSAI2_Config+0x1d0>)
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f023 0203 	bic.w	r2, r3, #3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4948      	ldr	r1, [pc, #288]	; (8003868 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003746:	4313      	orrs	r3, r2
 8003748:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800374a:	7bfb      	ldrb	r3, [r7, #15]
 800374c:	2b00      	cmp	r3, #0
 800374e:	f040 8086 	bne.w	800385e <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003752:	4b45      	ldr	r3, [pc, #276]	; (8003868 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a44      	ldr	r2, [pc, #272]	; (8003868 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003758:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800375c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800375e:	f7fd fcd1 	bl	8001104 <HAL_GetTick>
 8003762:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003764:	e009      	b.n	800377a <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003766:	f7fd fccd 	bl	8001104 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d902      	bls.n	800377a <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	73fb      	strb	r3, [r7, #15]
        break;
 8003778:	e005      	b.n	8003786 <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800377a:	4b3b      	ldr	r3, [pc, #236]	; (8003868 <RCCEx_PLLSAI2_Config+0x1d0>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1ef      	bne.n	8003766 <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003786:	7bfb      	ldrb	r3, [r7, #15]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d168      	bne.n	800385e <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d113      	bne.n	80037ba <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003792:	4b35      	ldr	r3, [pc, #212]	; (8003868 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003794:	695a      	ldr	r2, [r3, #20]
 8003796:	4b35      	ldr	r3, [pc, #212]	; (800386c <RCCEx_PLLSAI2_Config+0x1d4>)
 8003798:	4013      	ands	r3, r2
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	6892      	ldr	r2, [r2, #8]
 800379e:	0211      	lsls	r1, r2, #8
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	68d2      	ldr	r2, [r2, #12]
 80037a4:	06d2      	lsls	r2, r2, #27
 80037a6:	4311      	orrs	r1, r2
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6852      	ldr	r2, [r2, #4]
 80037ac:	3a01      	subs	r2, #1
 80037ae:	0112      	lsls	r2, r2, #4
 80037b0:	430a      	orrs	r2, r1
 80037b2:	492d      	ldr	r1, [pc, #180]	; (8003868 <RCCEx_PLLSAI2_Config+0x1d0>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	614b      	str	r3, [r1, #20]
 80037b8:	e02d      	b.n	8003816 <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d115      	bne.n	80037ec <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037c0:	4b29      	ldr	r3, [pc, #164]	; (8003868 <RCCEx_PLLSAI2_Config+0x1d0>)
 80037c2:	695a      	ldr	r2, [r3, #20]
 80037c4:	4b2a      	ldr	r3, [pc, #168]	; (8003870 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037c6:	4013      	ands	r3, r2
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	6892      	ldr	r2, [r2, #8]
 80037cc:	0211      	lsls	r1, r2, #8
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	6912      	ldr	r2, [r2, #16]
 80037d2:	0852      	lsrs	r2, r2, #1
 80037d4:	3a01      	subs	r2, #1
 80037d6:	0552      	lsls	r2, r2, #21
 80037d8:	4311      	orrs	r1, r2
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	6852      	ldr	r2, [r2, #4]
 80037de:	3a01      	subs	r2, #1
 80037e0:	0112      	lsls	r2, r2, #4
 80037e2:	430a      	orrs	r2, r1
 80037e4:	4920      	ldr	r1, [pc, #128]	; (8003868 <RCCEx_PLLSAI2_Config+0x1d0>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	614b      	str	r3, [r1, #20]
 80037ea:	e014      	b.n	8003816 <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037ec:	4b1e      	ldr	r3, [pc, #120]	; (8003868 <RCCEx_PLLSAI2_Config+0x1d0>)
 80037ee:	695a      	ldr	r2, [r3, #20]
 80037f0:	4b20      	ldr	r3, [pc, #128]	; (8003874 <RCCEx_PLLSAI2_Config+0x1dc>)
 80037f2:	4013      	ands	r3, r2
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	6892      	ldr	r2, [r2, #8]
 80037f8:	0211      	lsls	r1, r2, #8
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	6952      	ldr	r2, [r2, #20]
 80037fe:	0852      	lsrs	r2, r2, #1
 8003800:	3a01      	subs	r2, #1
 8003802:	0652      	lsls	r2, r2, #25
 8003804:	4311      	orrs	r1, r2
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6852      	ldr	r2, [r2, #4]
 800380a:	3a01      	subs	r2, #1
 800380c:	0112      	lsls	r2, r2, #4
 800380e:	430a      	orrs	r2, r1
 8003810:	4915      	ldr	r1, [pc, #84]	; (8003868 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003812:	4313      	orrs	r3, r2
 8003814:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003816:	4b14      	ldr	r3, [pc, #80]	; (8003868 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a13      	ldr	r2, [pc, #76]	; (8003868 <RCCEx_PLLSAI2_Config+0x1d0>)
 800381c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003820:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003822:	f7fd fc6f 	bl	8001104 <HAL_GetTick>
 8003826:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003828:	e009      	b.n	800383e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800382a:	f7fd fc6b 	bl	8001104 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b02      	cmp	r3, #2
 8003836:	d902      	bls.n	800383e <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	73fb      	strb	r3, [r7, #15]
          break;
 800383c:	e005      	b.n	800384a <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800383e:	4b0a      	ldr	r3, [pc, #40]	; (8003868 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d0ef      	beq.n	800382a <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 800384a:	7bfb      	ldrb	r3, [r7, #15]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d106      	bne.n	800385e <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003850:	4b05      	ldr	r3, [pc, #20]	; (8003868 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003852:	695a      	ldr	r2, [r3, #20]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	4903      	ldr	r1, [pc, #12]	; (8003868 <RCCEx_PLLSAI2_Config+0x1d0>)
 800385a:	4313      	orrs	r3, r2
 800385c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800385e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003860:	4618      	mov	r0, r3
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	40021000 	.word	0x40021000
 800386c:	07ff800f 	.word	0x07ff800f
 8003870:	ff9f800f 	.word	0xff9f800f
 8003874:	f9ff800f 	.word	0xf9ff800f

08003878 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e095      	b.n	80039b6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388e:	2b00      	cmp	r3, #0
 8003890:	d108      	bne.n	80038a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800389a:	d009      	beq.n	80038b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	61da      	str	r2, [r3, #28]
 80038a2:	e005      	b.n	80038b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d106      	bne.n	80038d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7fd fa3a 	bl	8000d44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2202      	movs	r2, #2
 80038d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038e6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038f0:	d902      	bls.n	80038f8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80038f2:	2300      	movs	r3, #0
 80038f4:	60fb      	str	r3, [r7, #12]
 80038f6:	e002      	b.n	80038fe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80038f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038fc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003906:	d007      	beq.n	8003918 <HAL_SPI_Init+0xa0>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003910:	d002      	beq.n	8003918 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003928:	431a      	orrs	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	431a      	orrs	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	431a      	orrs	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003946:	431a      	orrs	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	69db      	ldr	r3, [r3, #28]
 800394c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003950:	431a      	orrs	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800395a:	ea42 0103 	orr.w	r1, r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003962:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	0c1b      	lsrs	r3, r3, #16
 8003974:	f003 0204 	and.w	r2, r3, #4
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	f003 0310 	and.w	r3, r3, #16
 8003980:	431a      	orrs	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	431a      	orrs	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003994:	ea42 0103 	orr.w	r1, r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b082      	sub	sp, #8
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d101      	bne.n	80039d0 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e01a      	b.n	8003a06 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2202      	movs	r2, #2
 80039d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039e6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f7fd fa51 	bl	8000e90 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b088      	sub	sp, #32
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	60f8      	str	r0, [r7, #12]
 8003a16:	60b9      	str	r1, [r7, #8]
 8003a18:	603b      	str	r3, [r7, #0]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d101      	bne.n	8003a30 <HAL_SPI_Transmit+0x22>
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	e158      	b.n	8003ce2 <HAL_SPI_Transmit+0x2d4>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a38:	f7fd fb64 	bl	8001104 <HAL_GetTick>
 8003a3c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003a3e:	88fb      	ldrh	r3, [r7, #6]
 8003a40:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d002      	beq.n	8003a54 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003a4e:	2302      	movs	r3, #2
 8003a50:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a52:	e13d      	b.n	8003cd0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d002      	beq.n	8003a60 <HAL_SPI_Transmit+0x52>
 8003a5a:	88fb      	ldrh	r3, [r7, #6]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d102      	bne.n	8003a66 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a64:	e134      	b.n	8003cd0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2203      	movs	r2, #3
 8003a6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	68ba      	ldr	r2, [r7, #8]
 8003a78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	88fa      	ldrh	r2, [r7, #6]
 8003a7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	88fa      	ldrh	r2, [r7, #6]
 8003a84:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ab0:	d10f      	bne.n	8003ad2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ac0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ad0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003adc:	2b40      	cmp	r3, #64	; 0x40
 8003ade:	d007      	beq.n	8003af0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003aee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003af8:	d94b      	bls.n	8003b92 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d002      	beq.n	8003b08 <HAL_SPI_Transmit+0xfa>
 8003b02:	8afb      	ldrh	r3, [r7, #22]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d13e      	bne.n	8003b86 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0c:	881a      	ldrh	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b18:	1c9a      	adds	r2, r3, #2
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	3b01      	subs	r3, #1
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b2c:	e02b      	b.n	8003b86 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d112      	bne.n	8003b62 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b40:	881a      	ldrh	r2, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4c:	1c9a      	adds	r2, r3, #2
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b60:	e011      	b.n	8003b86 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b62:	f7fd facf 	bl	8001104 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d803      	bhi.n	8003b7a <HAL_SPI_Transmit+0x16c>
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b78:	d102      	bne.n	8003b80 <HAL_SPI_Transmit+0x172>
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d102      	bne.n	8003b86 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b84:	e0a4      	b.n	8003cd0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1ce      	bne.n	8003b2e <HAL_SPI_Transmit+0x120>
 8003b90:	e07c      	b.n	8003c8c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d002      	beq.n	8003ba0 <HAL_SPI_Transmit+0x192>
 8003b9a:	8afb      	ldrh	r3, [r7, #22]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d170      	bne.n	8003c82 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d912      	bls.n	8003bd0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bae:	881a      	ldrh	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bba:	1c9a      	adds	r2, r3, #2
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	3b02      	subs	r3, #2
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003bce:	e058      	b.n	8003c82 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	330c      	adds	r3, #12
 8003bda:	7812      	ldrb	r2, [r2, #0]
 8003bdc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be2:	1c5a      	adds	r2, r3, #1
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003bf6:	e044      	b.n	8003c82 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d12b      	bne.n	8003c5e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d912      	bls.n	8003c36 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c14:	881a      	ldrh	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c20:	1c9a      	adds	r2, r3, #2
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	3b02      	subs	r3, #2
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c34:	e025      	b.n	8003c82 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	330c      	adds	r3, #12
 8003c40:	7812      	ldrb	r2, [r2, #0]
 8003c42:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c48:	1c5a      	adds	r2, r3, #1
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	3b01      	subs	r3, #1
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c5c:	e011      	b.n	8003c82 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c5e:	f7fd fa51 	bl	8001104 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	683a      	ldr	r2, [r7, #0]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d803      	bhi.n	8003c76 <HAL_SPI_Transmit+0x268>
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c74:	d102      	bne.n	8003c7c <HAL_SPI_Transmit+0x26e>
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d102      	bne.n	8003c82 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003c80:	e026      	b.n	8003cd0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1b5      	bne.n	8003bf8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	6839      	ldr	r1, [r7, #0]
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f000 fdfb 	bl	800488c <SPI_EndRxTxTransaction>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d002      	beq.n	8003ca2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10a      	bne.n	8003cc0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003caa:	2300      	movs	r3, #0
 8003cac:	613b      	str	r3, [r7, #16]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	613b      	str	r3, [r7, #16]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	613b      	str	r3, [r7, #16]
 8003cbe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d002      	beq.n	8003cce <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	77fb      	strb	r3, [r7, #31]
 8003ccc:	e000      	b.n	8003cd0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003cce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003ce0:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3720      	adds	r7, #32
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b088      	sub	sp, #32
 8003cee:	af02      	add	r7, sp, #8
 8003cf0:	60f8      	str	r0, [r7, #12]
 8003cf2:	60b9      	str	r1, [r7, #8]
 8003cf4:	603b      	str	r3, [r7, #0]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d06:	d112      	bne.n	8003d2e <HAL_SPI_Receive+0x44>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d10e      	bne.n	8003d2e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2204      	movs	r2, #4
 8003d14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003d18:	88fa      	ldrh	r2, [r7, #6]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	68ba      	ldr	r2, [r7, #8]
 8003d22:	68b9      	ldr	r1, [r7, #8]
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f000 f910 	bl	8003f4a <HAL_SPI_TransmitReceive>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	e109      	b.n	8003f42 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d101      	bne.n	8003d3c <HAL_SPI_Receive+0x52>
 8003d38:	2302      	movs	r3, #2
 8003d3a:	e102      	b.n	8003f42 <HAL_SPI_Receive+0x258>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d44:	f7fd f9de 	bl	8001104 <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d002      	beq.n	8003d5c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003d56:	2302      	movs	r3, #2
 8003d58:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003d5a:	e0e9      	b.n	8003f30 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d002      	beq.n	8003d68 <HAL_SPI_Receive+0x7e>
 8003d62:	88fb      	ldrh	r3, [r7, #6]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d102      	bne.n	8003d6e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003d6c:	e0e0      	b.n	8003f30 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2204      	movs	r2, #4
 8003d72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	88fa      	ldrh	r2, [r7, #6]
 8003d86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	88fa      	ldrh	r2, [r7, #6]
 8003d8e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003db8:	d908      	bls.n	8003dcc <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003dc8:	605a      	str	r2, [r3, #4]
 8003dca:	e007      	b.n	8003ddc <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003dda:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003de4:	d10f      	bne.n	8003e06 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003df4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e04:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e10:	2b40      	cmp	r3, #64	; 0x40
 8003e12:	d007      	beq.n	8003e24 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e22:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e2c:	d867      	bhi.n	8003efe <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003e2e:	e030      	b.n	8003e92 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d117      	bne.n	8003e6e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f103 020c 	add.w	r2, r3, #12
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	7812      	ldrb	r2, [r2, #0]
 8003e4c:	b2d2      	uxtb	r2, r2
 8003e4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e54:	1c5a      	adds	r2, r3, #1
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	3b01      	subs	r3, #1
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003e6c:	e011      	b.n	8003e92 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e6e:	f7fd f949 	bl	8001104 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d803      	bhi.n	8003e86 <HAL_SPI_Receive+0x19c>
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e84:	d102      	bne.n	8003e8c <HAL_SPI_Receive+0x1a2>
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d102      	bne.n	8003e92 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003e90:	e04e      	b.n	8003f30 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1c8      	bne.n	8003e30 <HAL_SPI_Receive+0x146>
 8003e9e:	e034      	b.n	8003f0a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d115      	bne.n	8003eda <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68da      	ldr	r2, [r3, #12]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb8:	b292      	uxth	r2, r2
 8003eba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec0:	1c9a      	adds	r2, r3, #2
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003ed8:	e011      	b.n	8003efe <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003eda:	f7fd f913 	bl	8001104 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d803      	bhi.n	8003ef2 <HAL_SPI_Receive+0x208>
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef0:	d102      	bne.n	8003ef8 <HAL_SPI_Receive+0x20e>
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d102      	bne.n	8003efe <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003efc:	e018      	b.n	8003f30 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1ca      	bne.n	8003ea0 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	6839      	ldr	r1, [r7, #0]
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f000 fc64 	bl	80047dc <SPI_EndRxTransaction>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d002      	beq.n	8003f20 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d002      	beq.n	8003f2e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	75fb      	strb	r3, [r7, #23]
 8003f2c:	e000      	b.n	8003f30 <HAL_SPI_Receive+0x246>
  }

error :
 8003f2e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003f40:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3718      	adds	r7, #24
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b08a      	sub	sp, #40	; 0x28
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	60f8      	str	r0, [r7, #12]
 8003f52:	60b9      	str	r1, [r7, #8]
 8003f54:	607a      	str	r2, [r7, #4]
 8003f56:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d101      	bne.n	8003f70 <HAL_SPI_TransmitReceive+0x26>
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	e1fb      	b.n	8004368 <HAL_SPI_TransmitReceive+0x41e>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f78:	f7fd f8c4 	bl	8001104 <HAL_GetTick>
 8003f7c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f84:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003f8c:	887b      	ldrh	r3, [r7, #2]
 8003f8e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003f90:	887b      	ldrh	r3, [r7, #2]
 8003f92:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f94:	7efb      	ldrb	r3, [r7, #27]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d00e      	beq.n	8003fb8 <HAL_SPI_TransmitReceive+0x6e>
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fa0:	d106      	bne.n	8003fb0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d102      	bne.n	8003fb0 <HAL_SPI_TransmitReceive+0x66>
 8003faa:	7efb      	ldrb	r3, [r7, #27]
 8003fac:	2b04      	cmp	r3, #4
 8003fae:	d003      	beq.n	8003fb8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003fb6:	e1cd      	b.n	8004354 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d005      	beq.n	8003fca <HAL_SPI_TransmitReceive+0x80>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d002      	beq.n	8003fca <HAL_SPI_TransmitReceive+0x80>
 8003fc4:	887b      	ldrh	r3, [r7, #2]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d103      	bne.n	8003fd2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003fd0:	e1c0      	b.n	8004354 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b04      	cmp	r3, #4
 8003fdc:	d003      	beq.n	8003fe6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2205      	movs	r2, #5
 8003fe2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	887a      	ldrh	r2, [r7, #2]
 8003ff6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	887a      	ldrh	r2, [r7, #2]
 8003ffe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	887a      	ldrh	r2, [r7, #2]
 800400c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	887a      	ldrh	r2, [r7, #2]
 8004012:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004028:	d802      	bhi.n	8004030 <HAL_SPI_TransmitReceive+0xe6>
 800402a:	8a3b      	ldrh	r3, [r7, #16]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d908      	bls.n	8004042 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	685a      	ldr	r2, [r3, #4]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800403e:	605a      	str	r2, [r3, #4]
 8004040:	e007      	b.n	8004052 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004050:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800405c:	2b40      	cmp	r3, #64	; 0x40
 800405e:	d007      	beq.n	8004070 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800406e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004078:	d97c      	bls.n	8004174 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d002      	beq.n	8004088 <HAL_SPI_TransmitReceive+0x13e>
 8004082:	8a7b      	ldrh	r3, [r7, #18]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d169      	bne.n	800415c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408c:	881a      	ldrh	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004098:	1c9a      	adds	r2, r3, #2
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	3b01      	subs	r3, #1
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040ac:	e056      	b.n	800415c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d11b      	bne.n	80040f4 <HAL_SPI_TransmitReceive+0x1aa>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d016      	beq.n	80040f4 <HAL_SPI_TransmitReceive+0x1aa>
 80040c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d113      	bne.n	80040f4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d0:	881a      	ldrh	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040dc:	1c9a      	adds	r2, r3, #2
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	3b01      	subs	r3, #1
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040f0:	2300      	movs	r3, #0
 80040f2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d11c      	bne.n	800413c <HAL_SPI_TransmitReceive+0x1f2>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004108:	b29b      	uxth	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d016      	beq.n	800413c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68da      	ldr	r2, [r3, #12]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004118:	b292      	uxth	r2, r2
 800411a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004120:	1c9a      	adds	r2, r3, #2
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800412c:	b29b      	uxth	r3, r3
 800412e:	3b01      	subs	r3, #1
 8004130:	b29a      	uxth	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004138:	2301      	movs	r3, #1
 800413a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800413c:	f7fc ffe2 	bl	8001104 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004148:	429a      	cmp	r2, r3
 800414a:	d807      	bhi.n	800415c <HAL_SPI_TransmitReceive+0x212>
 800414c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004152:	d003      	beq.n	800415c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800415a:	e0fb      	b.n	8004354 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004160:	b29b      	uxth	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1a3      	bne.n	80040ae <HAL_SPI_TransmitReceive+0x164>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800416c:	b29b      	uxth	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d19d      	bne.n	80040ae <HAL_SPI_TransmitReceive+0x164>
 8004172:	e0df      	b.n	8004334 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d003      	beq.n	8004184 <HAL_SPI_TransmitReceive+0x23a>
 800417c:	8a7b      	ldrh	r3, [r7, #18]
 800417e:	2b01      	cmp	r3, #1
 8004180:	f040 80cb 	bne.w	800431a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004188:	b29b      	uxth	r3, r3
 800418a:	2b01      	cmp	r3, #1
 800418c:	d912      	bls.n	80041b4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004192:	881a      	ldrh	r2, [r3, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419e:	1c9a      	adds	r2, r3, #2
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	3b02      	subs	r3, #2
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041b2:	e0b2      	b.n	800431a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	330c      	adds	r3, #12
 80041be:	7812      	ldrb	r2, [r2, #0]
 80041c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c6:	1c5a      	adds	r2, r3, #1
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	3b01      	subs	r3, #1
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041da:	e09e      	b.n	800431a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d134      	bne.n	8004254 <HAL_SPI_TransmitReceive+0x30a>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d02f      	beq.n	8004254 <HAL_SPI_TransmitReceive+0x30a>
 80041f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d12c      	bne.n	8004254 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041fe:	b29b      	uxth	r3, r3
 8004200:	2b01      	cmp	r3, #1
 8004202:	d912      	bls.n	800422a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004208:	881a      	ldrh	r2, [r3, #0]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004214:	1c9a      	adds	r2, r3, #2
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800421e:	b29b      	uxth	r3, r3
 8004220:	3b02      	subs	r3, #2
 8004222:	b29a      	uxth	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004228:	e012      	b.n	8004250 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	330c      	adds	r3, #12
 8004234:	7812      	ldrb	r2, [r2, #0]
 8004236:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423c:	1c5a      	adds	r2, r3, #1
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004246:	b29b      	uxth	r3, r3
 8004248:	3b01      	subs	r3, #1
 800424a:	b29a      	uxth	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004250:	2300      	movs	r3, #0
 8004252:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b01      	cmp	r3, #1
 8004260:	d148      	bne.n	80042f4 <HAL_SPI_TransmitReceive+0x3aa>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004268:	b29b      	uxth	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d042      	beq.n	80042f4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004274:	b29b      	uxth	r3, r3
 8004276:	2b01      	cmp	r3, #1
 8004278:	d923      	bls.n	80042c2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68da      	ldr	r2, [r3, #12]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004284:	b292      	uxth	r2, r2
 8004286:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428c:	1c9a      	adds	r2, r3, #2
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004298:	b29b      	uxth	r3, r3
 800429a:	3b02      	subs	r3, #2
 800429c:	b29a      	uxth	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d81f      	bhi.n	80042f0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80042be:	605a      	str	r2, [r3, #4]
 80042c0:	e016      	b.n	80042f0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f103 020c 	add.w	r2, r3, #12
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ce:	7812      	ldrb	r2, [r2, #0]
 80042d0:	b2d2      	uxtb	r2, r2
 80042d2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d8:	1c5a      	adds	r2, r3, #1
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	3b01      	subs	r3, #1
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80042f0:	2301      	movs	r3, #1
 80042f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80042f4:	f7fc ff06 	bl	8001104 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004300:	429a      	cmp	r2, r3
 8004302:	d803      	bhi.n	800430c <HAL_SPI_TransmitReceive+0x3c2>
 8004304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800430a:	d102      	bne.n	8004312 <HAL_SPI_TransmitReceive+0x3c8>
 800430c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430e:	2b00      	cmp	r3, #0
 8004310:	d103      	bne.n	800431a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004318:	e01c      	b.n	8004354 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800431e:	b29b      	uxth	r3, r3
 8004320:	2b00      	cmp	r3, #0
 8004322:	f47f af5b 	bne.w	80041dc <HAL_SPI_TransmitReceive+0x292>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800432c:	b29b      	uxth	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	f47f af54 	bne.w	80041dc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004334:	69fa      	ldr	r2, [r7, #28]
 8004336:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f000 faa7 	bl	800488c <SPI_EndRxTxTransaction>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d006      	beq.n	8004352 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2220      	movs	r2, #32
 800434e:	661a      	str	r2, [r3, #96]	; 0x60
 8004350:	e000      	b.n	8004354 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004352:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004364:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004368:	4618      	mov	r0, r3
 800436a:	3728      	adds	r7, #40	; 0x28
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b088      	sub	sp, #32
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	099b      	lsrs	r3, r3, #6
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	2b00      	cmp	r3, #0
 8004392:	d10f      	bne.n	80043b4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00a      	beq.n	80043b4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	099b      	lsrs	r3, r3, #6
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d004      	beq.n	80043b4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	4798      	blx	r3
    return;
 80043b2:	e0d8      	b.n	8004566 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	085b      	lsrs	r3, r3, #1
 80043b8:	f003 0301 	and.w	r3, r3, #1
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00a      	beq.n	80043d6 <HAL_SPI_IRQHandler+0x66>
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	09db      	lsrs	r3, r3, #7
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d004      	beq.n	80043d6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	4798      	blx	r3
    return;
 80043d4:	e0c7      	b.n	8004566 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	095b      	lsrs	r3, r3, #5
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10c      	bne.n	80043fc <HAL_SPI_IRQHandler+0x8c>
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	099b      	lsrs	r3, r3, #6
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d106      	bne.n	80043fc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	0a1b      	lsrs	r3, r3, #8
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f000 80b5 	beq.w	8004566 <HAL_SPI_IRQHandler+0x1f6>
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	095b      	lsrs	r3, r3, #5
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 80ae 	beq.w	8004566 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	099b      	lsrs	r3, r3, #6
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	2b00      	cmp	r3, #0
 8004414:	d023      	beq.n	800445e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b03      	cmp	r3, #3
 8004420:	d011      	beq.n	8004446 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004426:	f043 0204 	orr.w	r2, r3, #4
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800442e:	2300      	movs	r3, #0
 8004430:	617b      	str	r3, [r7, #20]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	617b      	str	r3, [r7, #20]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	617b      	str	r3, [r7, #20]
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	e00b      	b.n	800445e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004446:	2300      	movs	r3, #0
 8004448:	613b      	str	r3, [r7, #16]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	613b      	str	r3, [r7, #16]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	613b      	str	r3, [r7, #16]
 800445a:	693b      	ldr	r3, [r7, #16]
        return;
 800445c:	e083      	b.n	8004566 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	095b      	lsrs	r3, r3, #5
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b00      	cmp	r3, #0
 8004468:	d014      	beq.n	8004494 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800446e:	f043 0201 	orr.w	r2, r3, #1
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004476:	2300      	movs	r3, #0
 8004478:	60fb      	str	r3, [r7, #12]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	60fb      	str	r3, [r7, #12]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	0a1b      	lsrs	r3, r3, #8
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00c      	beq.n	80044ba <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044a4:	f043 0208 	orr.w	r2, r3, #8
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80044ac:	2300      	movs	r3, #0
 80044ae:	60bb      	str	r3, [r7, #8]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	60bb      	str	r3, [r7, #8]
 80044b8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d050      	beq.n	8004564 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80044d0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d104      	bne.n	80044ee <HAL_SPI_IRQHandler+0x17e>
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d034      	beq.n	8004558 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	685a      	ldr	r2, [r3, #4]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 0203 	bic.w	r2, r2, #3
 80044fc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004502:	2b00      	cmp	r3, #0
 8004504:	d011      	beq.n	800452a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800450a:	4a18      	ldr	r2, [pc, #96]	; (800456c <HAL_SPI_IRQHandler+0x1fc>)
 800450c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004512:	4618      	mov	r0, r3
 8004514:	f7fd f8a4 	bl	8001660 <HAL_DMA_Abort_IT>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d005      	beq.n	800452a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004522:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800452e:	2b00      	cmp	r3, #0
 8004530:	d016      	beq.n	8004560 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004536:	4a0d      	ldr	r2, [pc, #52]	; (800456c <HAL_SPI_IRQHandler+0x1fc>)
 8004538:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800453e:	4618      	mov	r0, r3
 8004540:	f7fd f88e 	bl	8001660 <HAL_DMA_Abort_IT>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00a      	beq.n	8004560 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800454e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004556:	e003      	b.n	8004560 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 f809 	bl	8004570 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800455e:	e000      	b.n	8004562 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004560:	bf00      	nop
    return;
 8004562:	bf00      	nop
 8004564:	bf00      	nop
  }
}
 8004566:	3720      	adds	r7, #32
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	08004585 	.word	0x08004585

08004570 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004590:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f7ff ffe5 	bl	8004570 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80045a6:	bf00      	nop
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
	...

080045b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b088      	sub	sp, #32
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	603b      	str	r3, [r7, #0]
 80045bc:	4613      	mov	r3, r2
 80045be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80045c0:	f7fc fda0 	bl	8001104 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c8:	1a9b      	subs	r3, r3, r2
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	4413      	add	r3, r2
 80045ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80045d0:	f7fc fd98 	bl	8001104 <HAL_GetTick>
 80045d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80045d6:	4b39      	ldr	r3, [pc, #228]	; (80046bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	015b      	lsls	r3, r3, #5
 80045dc:	0d1b      	lsrs	r3, r3, #20
 80045de:	69fa      	ldr	r2, [r7, #28]
 80045e0:	fb02 f303 	mul.w	r3, r2, r3
 80045e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045e6:	e054      	b.n	8004692 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ee:	d050      	beq.n	8004692 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045f0:	f7fc fd88 	bl	8001104 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	69fa      	ldr	r2, [r7, #28]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d902      	bls.n	8004606 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d13d      	bne.n	8004682 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004614:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800461e:	d111      	bne.n	8004644 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004628:	d004      	beq.n	8004634 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004632:	d107      	bne.n	8004644 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004642:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004648:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800464c:	d10f      	bne.n	800466e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800465c:	601a      	str	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800466c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e017      	b.n	80046b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d101      	bne.n	800468c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004688:	2300      	movs	r3, #0
 800468a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	3b01      	subs	r3, #1
 8004690:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689a      	ldr	r2, [r3, #8]
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	4013      	ands	r3, r2
 800469c:	68ba      	ldr	r2, [r7, #8]
 800469e:	429a      	cmp	r2, r3
 80046a0:	bf0c      	ite	eq
 80046a2:	2301      	moveq	r3, #1
 80046a4:	2300      	movne	r3, #0
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	461a      	mov	r2, r3
 80046aa:	79fb      	ldrb	r3, [r7, #7]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d19b      	bne.n	80045e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3720      	adds	r7, #32
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	20000000 	.word	0x20000000

080046c0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b088      	sub	sp, #32
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
 80046cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80046ce:	f7fc fd19 	bl	8001104 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d6:	1a9b      	subs	r3, r3, r2
 80046d8:	683a      	ldr	r2, [r7, #0]
 80046da:	4413      	add	r3, r2
 80046dc:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80046de:	f7fc fd11 	bl	8001104 <HAL_GetTick>
 80046e2:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80046e4:	4b3c      	ldr	r3, [pc, #240]	; (80047d8 <SPI_WaitFifoStateUntilTimeout+0x118>)
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	4613      	mov	r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	4413      	add	r3, r2
 80046ee:	00da      	lsls	r2, r3, #3
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	0d1b      	lsrs	r3, r3, #20
 80046f4:	69fa      	ldr	r2, [r7, #28]
 80046f6:	fb02 f303 	mul.w	r3, r2, r3
 80046fa:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 80046fc:	e05f      	b.n	80047be <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004704:	d106      	bne.n	8004714 <SPI_WaitFifoStateUntilTimeout+0x54>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d103      	bne.n	8004714 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	330c      	adds	r3, #12
 8004712:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800471a:	d050      	beq.n	80047be <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800471c:	f7fc fcf2 	bl	8001104 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	69fa      	ldr	r2, [r7, #28]
 8004728:	429a      	cmp	r2, r3
 800472a:	d902      	bls.n	8004732 <SPI_WaitFifoStateUntilTimeout+0x72>
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d13d      	bne.n	80047ae <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004740:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800474a:	d111      	bne.n	8004770 <SPI_WaitFifoStateUntilTimeout+0xb0>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004754:	d004      	beq.n	8004760 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800475e:	d107      	bne.n	8004770 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800476e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004774:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004778:	d10f      	bne.n	800479a <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004788:	601a      	str	r2, [r3, #0]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004798:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e010      	b.n	80047d0 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 80047b4:	2300      	movs	r3, #0
 80047b6:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	3b01      	subs	r3, #1
 80047bc:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689a      	ldr	r2, [r3, #8]
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	4013      	ands	r3, r2
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d197      	bne.n	80046fe <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3720      	adds	r7, #32
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	20000000 	.word	0x20000000

080047dc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b086      	sub	sp, #24
 80047e0:	af02      	add	r7, sp, #8
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047f0:	d111      	bne.n	8004816 <SPI_EndRxTransaction+0x3a>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047fa:	d004      	beq.n	8004806 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004804:	d107      	bne.n	8004816 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004814:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	2200      	movs	r2, #0
 800481e:	2180      	movs	r1, #128	; 0x80
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f7ff fec5 	bl	80045b0 <SPI_WaitFlagStateUntilTimeout>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d007      	beq.n	800483c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004830:	f043 0220 	orr.w	r2, r3, #32
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e023      	b.n	8004884 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004844:	d11d      	bne.n	8004882 <SPI_EndRxTransaction+0xa6>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800484e:	d004      	beq.n	800485a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004858:	d113      	bne.n	8004882 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	9300      	str	r3, [sp, #0]
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	2200      	movs	r2, #0
 8004862:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f7ff ff2a 	bl	80046c0 <SPI_WaitFifoStateUntilTimeout>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d007      	beq.n	8004882 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004876:	f043 0220 	orr.w	r2, r3, #32
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e000      	b.n	8004884 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af02      	add	r7, sp, #8
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	9300      	str	r3, [sp, #0]
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	2200      	movs	r2, #0
 80048a0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f7ff ff0b 	bl	80046c0 <SPI_WaitFifoStateUntilTimeout>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d007      	beq.n	80048c0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048b4:	f043 0220 	orr.w	r2, r3, #32
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e027      	b.n	8004910 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	9300      	str	r3, [sp, #0]
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	2200      	movs	r2, #0
 80048c8:	2180      	movs	r1, #128	; 0x80
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	f7ff fe70 	bl	80045b0 <SPI_WaitFlagStateUntilTimeout>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d007      	beq.n	80048e6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048da:	f043 0220 	orr.w	r2, r3, #32
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e014      	b.n	8004910 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	9300      	str	r3, [sp, #0]
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f7ff fee4 	bl	80046c0 <SPI_WaitFifoStateUntilTimeout>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d007      	beq.n	800490e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004902:	f043 0220 	orr.w	r2, r3, #32
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e000      	b.n	8004910 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e042      	b.n	80049b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004930:	2b00      	cmp	r3, #0
 8004932:	d106      	bne.n	8004942 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f7fc f987 	bl	8000c50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2224      	movs	r2, #36	; 0x24
 8004946:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f022 0201 	bic.w	r2, r2, #1
 8004958:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f82c 	bl	80049b8 <UART_SetConfig>
 8004960:	4603      	mov	r3, r0
 8004962:	2b01      	cmp	r3, #1
 8004964:	d101      	bne.n	800496a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e022      	b.n	80049b0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496e:	2b00      	cmp	r3, #0
 8004970:	d002      	beq.n	8004978 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 faf2 	bl	8004f5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004986:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689a      	ldr	r2, [r3, #8]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004996:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f042 0201 	orr.w	r2, r2, #1
 80049a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 fb79 	bl	80050a0 <UART_CheckIdleState>
 80049ae:	4603      	mov	r3, r0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3708      	adds	r7, #8
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049b8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80049bc:	b088      	sub	sp, #32
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80049c2:	2300      	movs	r3, #0
 80049c4:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	689a      	ldr	r2, [r3, #8]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	431a      	orrs	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	695b      	ldr	r3, [r3, #20]
 80049d4:	431a      	orrs	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	69db      	ldr	r3, [r3, #28]
 80049da:	4313      	orrs	r3, r2
 80049dc:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049e2:	69fa      	ldr	r2, [r7, #28]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	4bb1      	ldr	r3, [pc, #708]	; (8004cb4 <UART_SetConfig+0x2fc>)
 80049f0:	4013      	ands	r3, r2
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	6812      	ldr	r2, [r2, #0]
 80049f6:	69f9      	ldr	r1, [r7, #28]
 80049f8:	430b      	orrs	r3, r1
 80049fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68da      	ldr	r2, [r3, #12]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4aa6      	ldr	r2, [pc, #664]	; (8004cb8 <UART_SetConfig+0x300>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d004      	beq.n	8004a2c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	69fa      	ldr	r2, [r7, #28]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004a36:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	6812      	ldr	r2, [r2, #0]
 8004a3e:	69f9      	ldr	r1, [r7, #28]
 8004a40:	430b      	orrs	r3, r1
 8004a42:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4a:	f023 010f 	bic.w	r1, r3, #15
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a97      	ldr	r2, [pc, #604]	; (8004cbc <UART_SetConfig+0x304>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d121      	bne.n	8004aa8 <UART_SetConfig+0xf0>
 8004a64:	4b96      	ldr	r3, [pc, #600]	; (8004cc0 <UART_SetConfig+0x308>)
 8004a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6a:	f003 0303 	and.w	r3, r3, #3
 8004a6e:	2b03      	cmp	r3, #3
 8004a70:	d816      	bhi.n	8004aa0 <UART_SetConfig+0xe8>
 8004a72:	a201      	add	r2, pc, #4	; (adr r2, 8004a78 <UART_SetConfig+0xc0>)
 8004a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a78:	08004a89 	.word	0x08004a89
 8004a7c:	08004a95 	.word	0x08004a95
 8004a80:	08004a8f 	.word	0x08004a8f
 8004a84:	08004a9b 	.word	0x08004a9b
 8004a88:	2301      	movs	r3, #1
 8004a8a:	76fb      	strb	r3, [r7, #27]
 8004a8c:	e0e8      	b.n	8004c60 <UART_SetConfig+0x2a8>
 8004a8e:	2302      	movs	r3, #2
 8004a90:	76fb      	strb	r3, [r7, #27]
 8004a92:	e0e5      	b.n	8004c60 <UART_SetConfig+0x2a8>
 8004a94:	2304      	movs	r3, #4
 8004a96:	76fb      	strb	r3, [r7, #27]
 8004a98:	e0e2      	b.n	8004c60 <UART_SetConfig+0x2a8>
 8004a9a:	2308      	movs	r3, #8
 8004a9c:	76fb      	strb	r3, [r7, #27]
 8004a9e:	e0df      	b.n	8004c60 <UART_SetConfig+0x2a8>
 8004aa0:	2310      	movs	r3, #16
 8004aa2:	76fb      	strb	r3, [r7, #27]
 8004aa4:	bf00      	nop
 8004aa6:	e0db      	b.n	8004c60 <UART_SetConfig+0x2a8>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a85      	ldr	r2, [pc, #532]	; (8004cc4 <UART_SetConfig+0x30c>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d134      	bne.n	8004b1c <UART_SetConfig+0x164>
 8004ab2:	4b83      	ldr	r3, [pc, #524]	; (8004cc0 <UART_SetConfig+0x308>)
 8004ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab8:	f003 030c 	and.w	r3, r3, #12
 8004abc:	2b0c      	cmp	r3, #12
 8004abe:	d829      	bhi.n	8004b14 <UART_SetConfig+0x15c>
 8004ac0:	a201      	add	r2, pc, #4	; (adr r2, 8004ac8 <UART_SetConfig+0x110>)
 8004ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac6:	bf00      	nop
 8004ac8:	08004afd 	.word	0x08004afd
 8004acc:	08004b15 	.word	0x08004b15
 8004ad0:	08004b15 	.word	0x08004b15
 8004ad4:	08004b15 	.word	0x08004b15
 8004ad8:	08004b09 	.word	0x08004b09
 8004adc:	08004b15 	.word	0x08004b15
 8004ae0:	08004b15 	.word	0x08004b15
 8004ae4:	08004b15 	.word	0x08004b15
 8004ae8:	08004b03 	.word	0x08004b03
 8004aec:	08004b15 	.word	0x08004b15
 8004af0:	08004b15 	.word	0x08004b15
 8004af4:	08004b15 	.word	0x08004b15
 8004af8:	08004b0f 	.word	0x08004b0f
 8004afc:	2300      	movs	r3, #0
 8004afe:	76fb      	strb	r3, [r7, #27]
 8004b00:	e0ae      	b.n	8004c60 <UART_SetConfig+0x2a8>
 8004b02:	2302      	movs	r3, #2
 8004b04:	76fb      	strb	r3, [r7, #27]
 8004b06:	e0ab      	b.n	8004c60 <UART_SetConfig+0x2a8>
 8004b08:	2304      	movs	r3, #4
 8004b0a:	76fb      	strb	r3, [r7, #27]
 8004b0c:	e0a8      	b.n	8004c60 <UART_SetConfig+0x2a8>
 8004b0e:	2308      	movs	r3, #8
 8004b10:	76fb      	strb	r3, [r7, #27]
 8004b12:	e0a5      	b.n	8004c60 <UART_SetConfig+0x2a8>
 8004b14:	2310      	movs	r3, #16
 8004b16:	76fb      	strb	r3, [r7, #27]
 8004b18:	bf00      	nop
 8004b1a:	e0a1      	b.n	8004c60 <UART_SetConfig+0x2a8>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a69      	ldr	r2, [pc, #420]	; (8004cc8 <UART_SetConfig+0x310>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d120      	bne.n	8004b68 <UART_SetConfig+0x1b0>
 8004b26:	4b66      	ldr	r3, [pc, #408]	; (8004cc0 <UART_SetConfig+0x308>)
 8004b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b30:	2b10      	cmp	r3, #16
 8004b32:	d00f      	beq.n	8004b54 <UART_SetConfig+0x19c>
 8004b34:	2b10      	cmp	r3, #16
 8004b36:	d802      	bhi.n	8004b3e <UART_SetConfig+0x186>
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d005      	beq.n	8004b48 <UART_SetConfig+0x190>
 8004b3c:	e010      	b.n	8004b60 <UART_SetConfig+0x1a8>
 8004b3e:	2b20      	cmp	r3, #32
 8004b40:	d005      	beq.n	8004b4e <UART_SetConfig+0x196>
 8004b42:	2b30      	cmp	r3, #48	; 0x30
 8004b44:	d009      	beq.n	8004b5a <UART_SetConfig+0x1a2>
 8004b46:	e00b      	b.n	8004b60 <UART_SetConfig+0x1a8>
 8004b48:	2300      	movs	r3, #0
 8004b4a:	76fb      	strb	r3, [r7, #27]
 8004b4c:	e088      	b.n	8004c60 <UART_SetConfig+0x2a8>
 8004b4e:	2302      	movs	r3, #2
 8004b50:	76fb      	strb	r3, [r7, #27]
 8004b52:	e085      	b.n	8004c60 <UART_SetConfig+0x2a8>
 8004b54:	2304      	movs	r3, #4
 8004b56:	76fb      	strb	r3, [r7, #27]
 8004b58:	e082      	b.n	8004c60 <UART_SetConfig+0x2a8>
 8004b5a:	2308      	movs	r3, #8
 8004b5c:	76fb      	strb	r3, [r7, #27]
 8004b5e:	e07f      	b.n	8004c60 <UART_SetConfig+0x2a8>
 8004b60:	2310      	movs	r3, #16
 8004b62:	76fb      	strb	r3, [r7, #27]
 8004b64:	bf00      	nop
 8004b66:	e07b      	b.n	8004c60 <UART_SetConfig+0x2a8>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a57      	ldr	r2, [pc, #348]	; (8004ccc <UART_SetConfig+0x314>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d120      	bne.n	8004bb4 <UART_SetConfig+0x1fc>
 8004b72:	4b53      	ldr	r3, [pc, #332]	; (8004cc0 <UART_SetConfig+0x308>)
 8004b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b78:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004b7c:	2b40      	cmp	r3, #64	; 0x40
 8004b7e:	d00f      	beq.n	8004ba0 <UART_SetConfig+0x1e8>
 8004b80:	2b40      	cmp	r3, #64	; 0x40
 8004b82:	d802      	bhi.n	8004b8a <UART_SetConfig+0x1d2>
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d005      	beq.n	8004b94 <UART_SetConfig+0x1dc>
 8004b88:	e010      	b.n	8004bac <UART_SetConfig+0x1f4>
 8004b8a:	2b80      	cmp	r3, #128	; 0x80
 8004b8c:	d005      	beq.n	8004b9a <UART_SetConfig+0x1e2>
 8004b8e:	2bc0      	cmp	r3, #192	; 0xc0
 8004b90:	d009      	beq.n	8004ba6 <UART_SetConfig+0x1ee>
 8004b92:	e00b      	b.n	8004bac <UART_SetConfig+0x1f4>
 8004b94:	2300      	movs	r3, #0
 8004b96:	76fb      	strb	r3, [r7, #27]
 8004b98:	e062      	b.n	8004c60 <UART_SetConfig+0x2a8>
 8004b9a:	2302      	movs	r3, #2
 8004b9c:	76fb      	strb	r3, [r7, #27]
 8004b9e:	e05f      	b.n	8004c60 <UART_SetConfig+0x2a8>
 8004ba0:	2304      	movs	r3, #4
 8004ba2:	76fb      	strb	r3, [r7, #27]
 8004ba4:	e05c      	b.n	8004c60 <UART_SetConfig+0x2a8>
 8004ba6:	2308      	movs	r3, #8
 8004ba8:	76fb      	strb	r3, [r7, #27]
 8004baa:	e059      	b.n	8004c60 <UART_SetConfig+0x2a8>
 8004bac:	2310      	movs	r3, #16
 8004bae:	76fb      	strb	r3, [r7, #27]
 8004bb0:	bf00      	nop
 8004bb2:	e055      	b.n	8004c60 <UART_SetConfig+0x2a8>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a45      	ldr	r2, [pc, #276]	; (8004cd0 <UART_SetConfig+0x318>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d124      	bne.n	8004c08 <UART_SetConfig+0x250>
 8004bbe:	4b40      	ldr	r3, [pc, #256]	; (8004cc0 <UART_SetConfig+0x308>)
 8004bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bcc:	d012      	beq.n	8004bf4 <UART_SetConfig+0x23c>
 8004bce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bd2:	d802      	bhi.n	8004bda <UART_SetConfig+0x222>
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d007      	beq.n	8004be8 <UART_SetConfig+0x230>
 8004bd8:	e012      	b.n	8004c00 <UART_SetConfig+0x248>
 8004bda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bde:	d006      	beq.n	8004bee <UART_SetConfig+0x236>
 8004be0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004be4:	d009      	beq.n	8004bfa <UART_SetConfig+0x242>
 8004be6:	e00b      	b.n	8004c00 <UART_SetConfig+0x248>
 8004be8:	2300      	movs	r3, #0
 8004bea:	76fb      	strb	r3, [r7, #27]
 8004bec:	e038      	b.n	8004c60 <UART_SetConfig+0x2a8>
 8004bee:	2302      	movs	r3, #2
 8004bf0:	76fb      	strb	r3, [r7, #27]
 8004bf2:	e035      	b.n	8004c60 <UART_SetConfig+0x2a8>
 8004bf4:	2304      	movs	r3, #4
 8004bf6:	76fb      	strb	r3, [r7, #27]
 8004bf8:	e032      	b.n	8004c60 <UART_SetConfig+0x2a8>
 8004bfa:	2308      	movs	r3, #8
 8004bfc:	76fb      	strb	r3, [r7, #27]
 8004bfe:	e02f      	b.n	8004c60 <UART_SetConfig+0x2a8>
 8004c00:	2310      	movs	r3, #16
 8004c02:	76fb      	strb	r3, [r7, #27]
 8004c04:	bf00      	nop
 8004c06:	e02b      	b.n	8004c60 <UART_SetConfig+0x2a8>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a2a      	ldr	r2, [pc, #168]	; (8004cb8 <UART_SetConfig+0x300>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d124      	bne.n	8004c5c <UART_SetConfig+0x2a4>
 8004c12:	4b2b      	ldr	r3, [pc, #172]	; (8004cc0 <UART_SetConfig+0x308>)
 8004c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c20:	d012      	beq.n	8004c48 <UART_SetConfig+0x290>
 8004c22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c26:	d802      	bhi.n	8004c2e <UART_SetConfig+0x276>
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d007      	beq.n	8004c3c <UART_SetConfig+0x284>
 8004c2c:	e012      	b.n	8004c54 <UART_SetConfig+0x29c>
 8004c2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c32:	d006      	beq.n	8004c42 <UART_SetConfig+0x28a>
 8004c34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c38:	d009      	beq.n	8004c4e <UART_SetConfig+0x296>
 8004c3a:	e00b      	b.n	8004c54 <UART_SetConfig+0x29c>
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	76fb      	strb	r3, [r7, #27]
 8004c40:	e00e      	b.n	8004c60 <UART_SetConfig+0x2a8>
 8004c42:	2302      	movs	r3, #2
 8004c44:	76fb      	strb	r3, [r7, #27]
 8004c46:	e00b      	b.n	8004c60 <UART_SetConfig+0x2a8>
 8004c48:	2304      	movs	r3, #4
 8004c4a:	76fb      	strb	r3, [r7, #27]
 8004c4c:	e008      	b.n	8004c60 <UART_SetConfig+0x2a8>
 8004c4e:	2308      	movs	r3, #8
 8004c50:	76fb      	strb	r3, [r7, #27]
 8004c52:	e005      	b.n	8004c60 <UART_SetConfig+0x2a8>
 8004c54:	2310      	movs	r3, #16
 8004c56:	76fb      	strb	r3, [r7, #27]
 8004c58:	bf00      	nop
 8004c5a:	e001      	b.n	8004c60 <UART_SetConfig+0x2a8>
 8004c5c:	2310      	movs	r3, #16
 8004c5e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a14      	ldr	r2, [pc, #80]	; (8004cb8 <UART_SetConfig+0x300>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	f040 80a1 	bne.w	8004dae <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c6c:	7efb      	ldrb	r3, [r7, #27]
 8004c6e:	2b08      	cmp	r3, #8
 8004c70:	d836      	bhi.n	8004ce0 <UART_SetConfig+0x328>
 8004c72:	a201      	add	r2, pc, #4	; (adr r2, 8004c78 <UART_SetConfig+0x2c0>)
 8004c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c78:	08004c9d 	.word	0x08004c9d
 8004c7c:	08004ce1 	.word	0x08004ce1
 8004c80:	08004ca5 	.word	0x08004ca5
 8004c84:	08004ce1 	.word	0x08004ce1
 8004c88:	08004cab 	.word	0x08004cab
 8004c8c:	08004ce1 	.word	0x08004ce1
 8004c90:	08004ce1 	.word	0x08004ce1
 8004c94:	08004ce1 	.word	0x08004ce1
 8004c98:	08004cd9 	.word	0x08004cd9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c9c:	f7fd fff6 	bl	8002c8c <HAL_RCC_GetPCLK1Freq>
 8004ca0:	6178      	str	r0, [r7, #20]
        break;
 8004ca2:	e022      	b.n	8004cea <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ca4:	4b0b      	ldr	r3, [pc, #44]	; (8004cd4 <UART_SetConfig+0x31c>)
 8004ca6:	617b      	str	r3, [r7, #20]
        break;
 8004ca8:	e01f      	b.n	8004cea <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004caa:	f7fd ff59 	bl	8002b60 <HAL_RCC_GetSysClockFreq>
 8004cae:	6178      	str	r0, [r7, #20]
        break;
 8004cb0:	e01b      	b.n	8004cea <UART_SetConfig+0x332>
 8004cb2:	bf00      	nop
 8004cb4:	cfff69f3 	.word	0xcfff69f3
 8004cb8:	40008000 	.word	0x40008000
 8004cbc:	40013800 	.word	0x40013800
 8004cc0:	40021000 	.word	0x40021000
 8004cc4:	40004400 	.word	0x40004400
 8004cc8:	40004800 	.word	0x40004800
 8004ccc:	40004c00 	.word	0x40004c00
 8004cd0:	40005000 	.word	0x40005000
 8004cd4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cdc:	617b      	str	r3, [r7, #20]
        break;
 8004cde:	e004      	b.n	8004cea <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	76bb      	strb	r3, [r7, #26]
        break;
 8004ce8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 811d 	beq.w	8004f2c <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf6:	4a97      	ldr	r2, [pc, #604]	; (8004f54 <UART_SetConfig+0x59c>)
 8004cf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d04:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685a      	ldr	r2, [r3, #4]
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	005b      	lsls	r3, r3, #1
 8004d0e:	4413      	add	r3, r2
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d305      	bcc.n	8004d22 <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d1c:	68ba      	ldr	r2, [r7, #8]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d902      	bls.n	8004d28 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	76bb      	strb	r3, [r7, #26]
 8004d26:	e101      	b.n	8004f2c <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f04f 0100 	mov.w	r1, #0
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d34:	4a87      	ldr	r2, [pc, #540]	; (8004f54 <UART_SetConfig+0x59c>)
 8004d36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	f04f 0400 	mov.w	r4, #0
 8004d40:	461a      	mov	r2, r3
 8004d42:	4623      	mov	r3, r4
 8004d44:	f7fb fa5a 	bl	80001fc <__aeabi_uldivmod>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	460c      	mov	r4, r1
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	4622      	mov	r2, r4
 8004d50:	f04f 0300 	mov.w	r3, #0
 8004d54:	f04f 0400 	mov.w	r4, #0
 8004d58:	0214      	lsls	r4, r2, #8
 8004d5a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004d5e:	020b      	lsls	r3, r1, #8
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	6852      	ldr	r2, [r2, #4]
 8004d64:	0852      	lsrs	r2, r2, #1
 8004d66:	4611      	mov	r1, r2
 8004d68:	f04f 0200 	mov.w	r2, #0
 8004d6c:	eb13 0b01 	adds.w	fp, r3, r1
 8004d70:	eb44 0c02 	adc.w	ip, r4, r2
 8004d74:	4658      	mov	r0, fp
 8004d76:	4661      	mov	r1, ip
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f04f 0400 	mov.w	r4, #0
 8004d80:	461a      	mov	r2, r3
 8004d82:	4623      	mov	r3, r4
 8004d84:	f7fb fa3a 	bl	80001fc <__aeabi_uldivmod>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	460c      	mov	r4, r1
 8004d8c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d94:	d308      	bcc.n	8004da8 <UART_SetConfig+0x3f0>
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d9c:	d204      	bcs.n	8004da8 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	693a      	ldr	r2, [r7, #16]
 8004da4:	60da      	str	r2, [r3, #12]
 8004da6:	e0c1      	b.n	8004f2c <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	76bb      	strb	r3, [r7, #26]
 8004dac:	e0be      	b.n	8004f2c <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	69db      	ldr	r3, [r3, #28]
 8004db2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004db6:	d164      	bne.n	8004e82 <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8004db8:	7efb      	ldrb	r3, [r7, #27]
 8004dba:	2b08      	cmp	r3, #8
 8004dbc:	d827      	bhi.n	8004e0e <UART_SetConfig+0x456>
 8004dbe:	a201      	add	r2, pc, #4	; (adr r2, 8004dc4 <UART_SetConfig+0x40c>)
 8004dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc4:	08004de9 	.word	0x08004de9
 8004dc8:	08004df1 	.word	0x08004df1
 8004dcc:	08004df9 	.word	0x08004df9
 8004dd0:	08004e0f 	.word	0x08004e0f
 8004dd4:	08004dff 	.word	0x08004dff
 8004dd8:	08004e0f 	.word	0x08004e0f
 8004ddc:	08004e0f 	.word	0x08004e0f
 8004de0:	08004e0f 	.word	0x08004e0f
 8004de4:	08004e07 	.word	0x08004e07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004de8:	f7fd ff50 	bl	8002c8c <HAL_RCC_GetPCLK1Freq>
 8004dec:	6178      	str	r0, [r7, #20]
        break;
 8004dee:	e013      	b.n	8004e18 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004df0:	f7fd ff62 	bl	8002cb8 <HAL_RCC_GetPCLK2Freq>
 8004df4:	6178      	str	r0, [r7, #20]
        break;
 8004df6:	e00f      	b.n	8004e18 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004df8:	4b57      	ldr	r3, [pc, #348]	; (8004f58 <UART_SetConfig+0x5a0>)
 8004dfa:	617b      	str	r3, [r7, #20]
        break;
 8004dfc:	e00c      	b.n	8004e18 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dfe:	f7fd feaf 	bl	8002b60 <HAL_RCC_GetSysClockFreq>
 8004e02:	6178      	str	r0, [r7, #20]
        break;
 8004e04:	e008      	b.n	8004e18 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e0a:	617b      	str	r3, [r7, #20]
        break;
 8004e0c:	e004      	b.n	8004e18 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	76bb      	strb	r3, [r7, #26]
        break;
 8004e16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f000 8086 	beq.w	8004f2c <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e24:	4a4b      	ldr	r2, [pc, #300]	; (8004f54 <UART_SetConfig+0x59c>)
 8004e26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e32:	005a      	lsls	r2, r3, #1
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	085b      	lsrs	r3, r3, #1
 8004e3a:	441a      	add	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	2b0f      	cmp	r3, #15
 8004e4c:	d916      	bls.n	8004e7c <UART_SetConfig+0x4c4>
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e54:	d212      	bcs.n	8004e7c <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	f023 030f 	bic.w	r3, r3, #15
 8004e5e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	085b      	lsrs	r3, r3, #1
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	f003 0307 	and.w	r3, r3, #7
 8004e6a:	b29a      	uxth	r2, r3
 8004e6c:	89fb      	ldrh	r3, [r7, #14]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	89fa      	ldrh	r2, [r7, #14]
 8004e78:	60da      	str	r2, [r3, #12]
 8004e7a:	e057      	b.n	8004f2c <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	76bb      	strb	r3, [r7, #26]
 8004e80:	e054      	b.n	8004f2c <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e82:	7efb      	ldrb	r3, [r7, #27]
 8004e84:	2b08      	cmp	r3, #8
 8004e86:	d828      	bhi.n	8004eda <UART_SetConfig+0x522>
 8004e88:	a201      	add	r2, pc, #4	; (adr r2, 8004e90 <UART_SetConfig+0x4d8>)
 8004e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8e:	bf00      	nop
 8004e90:	08004eb5 	.word	0x08004eb5
 8004e94:	08004ebd 	.word	0x08004ebd
 8004e98:	08004ec5 	.word	0x08004ec5
 8004e9c:	08004edb 	.word	0x08004edb
 8004ea0:	08004ecb 	.word	0x08004ecb
 8004ea4:	08004edb 	.word	0x08004edb
 8004ea8:	08004edb 	.word	0x08004edb
 8004eac:	08004edb 	.word	0x08004edb
 8004eb0:	08004ed3 	.word	0x08004ed3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004eb4:	f7fd feea 	bl	8002c8c <HAL_RCC_GetPCLK1Freq>
 8004eb8:	6178      	str	r0, [r7, #20]
        break;
 8004eba:	e013      	b.n	8004ee4 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ebc:	f7fd fefc 	bl	8002cb8 <HAL_RCC_GetPCLK2Freq>
 8004ec0:	6178      	str	r0, [r7, #20]
        break;
 8004ec2:	e00f      	b.n	8004ee4 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ec4:	4b24      	ldr	r3, [pc, #144]	; (8004f58 <UART_SetConfig+0x5a0>)
 8004ec6:	617b      	str	r3, [r7, #20]
        break;
 8004ec8:	e00c      	b.n	8004ee4 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eca:	f7fd fe49 	bl	8002b60 <HAL_RCC_GetSysClockFreq>
 8004ece:	6178      	str	r0, [r7, #20]
        break;
 8004ed0:	e008      	b.n	8004ee4 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ed2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ed6:	617b      	str	r3, [r7, #20]
        break;
 8004ed8:	e004      	b.n	8004ee4 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 8004eda:	2300      	movs	r3, #0
 8004edc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	76bb      	strb	r3, [r7, #26]
        break;
 8004ee2:	bf00      	nop
    }

    if (pclk != 0U)
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d020      	beq.n	8004f2c <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eee:	4a19      	ldr	r2, [pc, #100]	; (8004f54 <UART_SetConfig+0x59c>)
 8004ef0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	fbb3 f2f2 	udiv	r2, r3, r2
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	085b      	lsrs	r3, r3, #1
 8004f02:	441a      	add	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	2b0f      	cmp	r3, #15
 8004f14:	d908      	bls.n	8004f28 <UART_SetConfig+0x570>
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f1c:	d204      	bcs.n	8004f28 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	60da      	str	r2, [r3, #12]
 8004f26:	e001      	b.n	8004f2c <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8004f48:	7ebb      	ldrb	r3, [r7, #26]
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3720      	adds	r7, #32
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004f54:	08005534 	.word	0x08005534
 8004f58:	00f42400 	.word	0x00f42400

08004f5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f68:	f003 0301 	and.w	r3, r3, #1
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00a      	beq.n	8004f86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	430a      	orrs	r2, r1
 8004f84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00a      	beq.n	8004fa8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fac:	f003 0304 	and.w	r3, r3, #4
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00a      	beq.n	8004fca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fce:	f003 0308 	and.w	r3, r3, #8
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00a      	beq.n	8004fec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	430a      	orrs	r2, r1
 8004fea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff0:	f003 0310 	and.w	r3, r3, #16
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00a      	beq.n	800500e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	430a      	orrs	r2, r1
 800500c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005012:	f003 0320 	and.w	r3, r3, #32
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00a      	beq.n	8005030 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	430a      	orrs	r2, r1
 800502e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005038:	2b00      	cmp	r3, #0
 800503a:	d01a      	beq.n	8005072 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	430a      	orrs	r2, r1
 8005050:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005056:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800505a:	d10a      	bne.n	8005072 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	430a      	orrs	r2, r1
 8005070:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00a      	beq.n	8005094 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	430a      	orrs	r2, r1
 8005092:	605a      	str	r2, [r3, #4]
  }
}
 8005094:	bf00      	nop
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af02      	add	r7, sp, #8
 80050a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80050b0:	f7fc f828 	bl	8001104 <HAL_GetTick>
 80050b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0308 	and.w	r3, r3, #8
 80050c0:	2b08      	cmp	r3, #8
 80050c2:	d10e      	bne.n	80050e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050c8:	9300      	str	r3, [sp, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 f82c 	bl	8005130 <UART_WaitOnFlagUntilTimeout>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d001      	beq.n	80050e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e022      	b.n	8005128 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0304 	and.w	r3, r3, #4
 80050ec:	2b04      	cmp	r3, #4
 80050ee:	d10e      	bne.n	800510e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050f4:	9300      	str	r3, [sp, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 f816 	bl	8005130 <UART_WaitOnFlagUntilTimeout>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d001      	beq.n	800510e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e00c      	b.n	8005128 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2220      	movs	r2, #32
 8005112:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2220      	movs	r2, #32
 800511a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3710      	adds	r7, #16
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	603b      	str	r3, [r7, #0]
 800513c:	4613      	mov	r3, r2
 800513e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005140:	e062      	b.n	8005208 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005148:	d05e      	beq.n	8005208 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800514a:	f7fb ffdb 	bl	8001104 <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	69ba      	ldr	r2, [r7, #24]
 8005156:	429a      	cmp	r2, r3
 8005158:	d302      	bcc.n	8005160 <UART_WaitOnFlagUntilTimeout+0x30>
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d11d      	bne.n	800519c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800516e:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	689a      	ldr	r2, [r3, #8]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f022 0201 	bic.w	r2, r2, #1
 800517e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2220      	movs	r2, #32
 8005184:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2220      	movs	r2, #32
 800518c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e045      	b.n	8005228 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0304 	and.w	r3, r3, #4
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d02e      	beq.n	8005208 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	69db      	ldr	r3, [r3, #28]
 80051b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051b8:	d126      	bne.n	8005208 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051c2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80051d2:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689a      	ldr	r2, [r3, #8]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f022 0201 	bic.w	r2, r2, #1
 80051e2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2220      	movs	r2, #32
 80051e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2220      	movs	r2, #32
 80051f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2220      	movs	r2, #32
 80051f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e00f      	b.n	8005228 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	69da      	ldr	r2, [r3, #28]
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	4013      	ands	r3, r2
 8005212:	68ba      	ldr	r2, [r7, #8]
 8005214:	429a      	cmp	r2, r3
 8005216:	bf0c      	ite	eq
 8005218:	2301      	moveq	r3, #1
 800521a:	2300      	movne	r3, #0
 800521c:	b2db      	uxtb	r3, r3
 800521e:	461a      	mov	r2, r3
 8005220:	79fb      	ldrb	r3, [r7, #7]
 8005222:	429a      	cmp	r2, r3
 8005224:	d08d      	beq.n	8005142 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3710      	adds	r7, #16
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800523e:	2b01      	cmp	r3, #1
 8005240:	d101      	bne.n	8005246 <HAL_UARTEx_DisableFifoMode+0x16>
 8005242:	2302      	movs	r3, #2
 8005244:	e027      	b.n	8005296 <HAL_UARTEx_DisableFifoMode+0x66>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2224      	movs	r2, #36	; 0x24
 8005252:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f022 0201 	bic.w	r2, r2, #1
 800526c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005274:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2220      	movs	r2, #32
 8005288:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3714      	adds	r7, #20
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr

080052a2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b084      	sub	sp, #16
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
 80052aa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d101      	bne.n	80052ba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80052b6:	2302      	movs	r3, #2
 80052b8:	e02d      	b.n	8005316 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2224      	movs	r2, #36	; 0x24
 80052c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f022 0201 	bic.w	r2, r2, #1
 80052e0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	683a      	ldr	r2, [r7, #0]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f850 	bl	800539c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2220      	movs	r2, #32
 8005308:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3710      	adds	r7, #16
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800531e:	b580      	push	{r7, lr}
 8005320:	b084      	sub	sp, #16
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
 8005326:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800532e:	2b01      	cmp	r3, #1
 8005330:	d101      	bne.n	8005336 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005332:	2302      	movs	r3, #2
 8005334:	e02d      	b.n	8005392 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2201      	movs	r2, #1
 800533a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2224      	movs	r2, #36	; 0x24
 8005342:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f022 0201 	bic.w	r2, r2, #1
 800535c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	683a      	ldr	r2, [r7, #0]
 800536e:	430a      	orrs	r2, r1
 8005370:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 f812 	bl	800539c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2220      	movs	r2, #32
 8005384:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3710      	adds	r7, #16
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
	...

0800539c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800539c:	b480      	push	{r7}
 800539e:	b089      	sub	sp, #36	; 0x24
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80053a4:	4a2f      	ldr	r2, [pc, #188]	; (8005464 <UARTEx_SetNbDataToProcess+0xc8>)
 80053a6:	f107 0314 	add.w	r3, r7, #20
 80053aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80053ae:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80053b2:	4a2d      	ldr	r2, [pc, #180]	; (8005468 <UARTEx_SetNbDataToProcess+0xcc>)
 80053b4:	f107 030c 	add.w	r3, r7, #12
 80053b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80053bc:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d108      	bne.n	80053da <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80053d8:	e03d      	b.n	8005456 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80053da:	2308      	movs	r3, #8
 80053dc:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80053de:	2308      	movs	r3, #8
 80053e0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	0e5b      	lsrs	r3, r3, #25
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	f003 0307 	and.w	r3, r3, #7
 80053f0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	0f5b      	lsrs	r3, r3, #29
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	f003 0307 	and.w	r3, r3, #7
 8005400:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005402:	7fbb      	ldrb	r3, [r7, #30]
 8005404:	7f3a      	ldrb	r2, [r7, #28]
 8005406:	f107 0120 	add.w	r1, r7, #32
 800540a:	440a      	add	r2, r1
 800540c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005410:	fb02 f303 	mul.w	r3, r2, r3
 8005414:	7f3a      	ldrb	r2, [r7, #28]
 8005416:	f107 0120 	add.w	r1, r7, #32
 800541a:	440a      	add	r2, r1
 800541c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005420:	fb93 f3f2 	sdiv	r3, r3, r2
 8005424:	b29a      	uxth	r2, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800542c:	7ffb      	ldrb	r3, [r7, #31]
 800542e:	7f7a      	ldrb	r2, [r7, #29]
 8005430:	f107 0120 	add.w	r1, r7, #32
 8005434:	440a      	add	r2, r1
 8005436:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800543a:	fb02 f303 	mul.w	r3, r2, r3
 800543e:	7f7a      	ldrb	r2, [r7, #29]
 8005440:	f107 0120 	add.w	r1, r7, #32
 8005444:	440a      	add	r2, r1
 8005446:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800544a:	fb93 f3f2 	sdiv	r3, r3, r2
 800544e:	b29a      	uxth	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005456:	bf00      	nop
 8005458:	3724      	adds	r7, #36	; 0x24
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	080054dc 	.word	0x080054dc
 8005468:	080054e4 	.word	0x080054e4

0800546c <__libc_init_array>:
 800546c:	b570      	push	{r4, r5, r6, lr}
 800546e:	4e0d      	ldr	r6, [pc, #52]	; (80054a4 <__libc_init_array+0x38>)
 8005470:	4c0d      	ldr	r4, [pc, #52]	; (80054a8 <__libc_init_array+0x3c>)
 8005472:	1ba4      	subs	r4, r4, r6
 8005474:	10a4      	asrs	r4, r4, #2
 8005476:	2500      	movs	r5, #0
 8005478:	42a5      	cmp	r5, r4
 800547a:	d109      	bne.n	8005490 <__libc_init_array+0x24>
 800547c:	4e0b      	ldr	r6, [pc, #44]	; (80054ac <__libc_init_array+0x40>)
 800547e:	4c0c      	ldr	r4, [pc, #48]	; (80054b0 <__libc_init_array+0x44>)
 8005480:	f000 f820 	bl	80054c4 <_init>
 8005484:	1ba4      	subs	r4, r4, r6
 8005486:	10a4      	asrs	r4, r4, #2
 8005488:	2500      	movs	r5, #0
 800548a:	42a5      	cmp	r5, r4
 800548c:	d105      	bne.n	800549a <__libc_init_array+0x2e>
 800548e:	bd70      	pop	{r4, r5, r6, pc}
 8005490:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005494:	4798      	blx	r3
 8005496:	3501      	adds	r5, #1
 8005498:	e7ee      	b.n	8005478 <__libc_init_array+0xc>
 800549a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800549e:	4798      	blx	r3
 80054a0:	3501      	adds	r5, #1
 80054a2:	e7f2      	b.n	800548a <__libc_init_array+0x1e>
 80054a4:	08005554 	.word	0x08005554
 80054a8:	08005554 	.word	0x08005554
 80054ac:	08005554 	.word	0x08005554
 80054b0:	08005558 	.word	0x08005558

080054b4 <memset>:
 80054b4:	4402      	add	r2, r0
 80054b6:	4603      	mov	r3, r0
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d100      	bne.n	80054be <memset+0xa>
 80054bc:	4770      	bx	lr
 80054be:	f803 1b01 	strb.w	r1, [r3], #1
 80054c2:	e7f9      	b.n	80054b8 <memset+0x4>

080054c4 <_init>:
 80054c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054c6:	bf00      	nop
 80054c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ca:	bc08      	pop	{r3}
 80054cc:	469e      	mov	lr, r3
 80054ce:	4770      	bx	lr

080054d0 <_fini>:
 80054d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054d2:	bf00      	nop
 80054d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054d6:	bc08      	pop	{r3}
 80054d8:	469e      	mov	lr, r3
 80054da:	4770      	bx	lr
